<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" media="screen" href="/~d/styles/atom10full.xsl"?><?xml-stylesheet type="text/css" media="screen" href="http://feeds.feedburner.com/~d/styles/itemcontent.css"?><feed xmlns="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:feedburner="http://rssnamespace.org/feedburner/ext/1.0"><title>JBoss Tools Aggregated Feed</title><link rel="alternate" href="http://tools.jboss.org" /><subtitle>JBoss Tools Aggregated Feed</subtitle><dc:creator>JBoss Tools</dc:creator><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="self" type="application/atom+xml" href="http://feeds.feedburner.com/jbossbuzz" /><feedburner:info uri="jbossbuzz" /><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="hub" href="http://pubsubhubbub.appspot.com/" /><entry><title>Getting Quarked</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/KiJuEE3YJSA/getting-quarked.html" /><category term="cloud" scheme="searchisko:content:tags" /><category term="english" scheme="searchisko:content:tags" /><category term="feed_group_name_jbossas" scheme="searchisko:content:tags" /><category term="feed_name_dimitris" scheme="searchisko:content:tags" /><category term="Java" scheme="searchisko:content:tags" /><category term="JBoss" scheme="searchisko:content:tags" /><category term="native" scheme="searchisko:content:tags" /><category term="quarkus" scheme="searchisko:content:tags" /><category term="redhat" scheme="searchisko:content:tags" /><category term="subatomic" scheme="searchisko:content:tags" /><category term="supersonic" scheme="searchisko:content:tags" /><author><name>Dimitris Andreadis</name></author><id>searchisko:content:id:jbossorg_blog-getting_quarked</id><updated>2019-05-22T16:20:11Z</updated><published>2019-05-22T16:20:11Z</published><content type="html">&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;a href="https://quarkus.io/" target="_blank"&gt;Quarkus&lt;/a&gt; has made its debut just two and half months ago on March 7th, 2019 with the release of &lt;a href="https://github.com/quarkusio/quarkus/releases/tag/0.11.0" target="_blank"&gt;version 0.11&lt;/a&gt; and this &lt;a href="https://developers.redhat.com/blog/2019/03/07/quarkus-next-generation-kubernetes-native-java-framework/" target="_blank"&gt;public announcement&lt;/a&gt;, and since then it has made a lot of &lt;a href="https://twitter.com/search?q=%23Quarkus&amp;amp;src=typed_query" target="_blank"&gt;buzz&lt;/a&gt; in the Java universe while attracting significant &lt;a href="https://twitter.com/parisjug/status/1128406629966336000" target="_blank"&gt;developer interest&lt;/a&gt;. This is still early days so most people are mostly in the experimental stage getting their feet wet and having a first taste of what it means to write Supersonic Subatomic Java apps. (And just in case you haven't heard of Quarkus check out this introductory &lt;a href="https://www.youtube.com/watch?v=7G_r1iyrn2c" target="_blank"&gt;video&lt;/a&gt;.)&lt;br /&gt;&lt;br /&gt;By some twist of luck the first public release of Quarkus came right out of the Red Hat Neuch√¢tel Office in Switzerland, the original JBoss HQ for Europe, where a large part of the very much distributed Quarkus engineering team was having a meeting the concluded with a release hackathon.&lt;br /&gt;&lt;br /&gt;&lt;table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="float: left; margin-right: 1em; text-align: left;"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style="text-align: center;"&gt;&lt;a href="https://1.bp.blogspot.com/-FRGpSEqGhmo/XORyW884iQI/AAAAAAAAQWQ/PZZOnO8U1t8a7eygdKlqVPIYDtGk4wWUACLcBGAs/s1600/Quarkus-Team.JPG" imageanchor="1" style="margin-left: auto; margin-right: auto;"&gt;&lt;img border="0" data-original-height="1200" data-original-width="1600" height="300" src="https://1.bp.blogspot.com/-FRGpSEqGhmo/XORyW884iQI/AAAAAAAAQWQ/PZZOnO8U1t8a7eygdKlqVPIYDtGk4wWUACLcBGAs/s400/Quarkus-Team.JPG" width="400" /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="tr-caption" style="text-align: center;"&gt;History in the making - Quarkus about to be released to the public&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;Of course, Quarkus was not born there. For years various people and teams at Red Hat including the &lt;a href="https://wildfly.org/" target="_blank"&gt;WildFly&lt;/a&gt;/&lt;a href="https://www.redhat.com/en/technologies/jboss-middleware/application-platform" target="_blank"&gt;EAP&lt;/a&gt; team with &lt;a href="https://docs.wildfly.org/galleon/" target="_blank"&gt;Galleon&lt;/a&gt;, as well as the sister &lt;a href="https://wildfly.org/news/2015/05/05/WildFly-Swarm-Released/" target="_blank"&gt;WildFly-Swarm&lt;/a&gt;/&lt;a href="https://thorntail.io/" target="_blank"&gt;Thorntailv4&lt;/a&gt; projects, the Drools team with &lt;a href="https://developers.redhat.com/blog/2019/03/14/quarking-drools-how-we-turned-a-13-year-old-java-project-into-a-first-class-serverless-component/" target="_blank"&gt;Submarine&lt;/a&gt;, the OpenJDK team and others, were experimenting with evolutionary approaches for reducing the runtime overhead of Java applications to make them more space and time efficient for cloud native deployments. &lt;br /&gt;&lt;br /&gt;However, at some point it became evident that evolutionary approaches wouldn't cut it for the order-of-magnitude scale improvements we were targeting so three of our most prominent architects, (alphabetically) &lt;a href="https://twitter.com/bobmcwhirter" target="_blank"&gt;Bob McWhirter&lt;/a&gt;, &lt;a href="https://twitter.com/emmanuelbernard" target="_blank"&gt;Emmanuel Bernard&lt;/a&gt; and &lt;a href="https://twitter.com/jtgreene" target="_blank"&gt;Jason Greene&lt;/a&gt; came together and with our &lt;a href="https://twitter.com/nmcl" target="_blank"&gt;CTO&lt;/a&gt;'s blessings started a Proof-of-Concept (initially stealth) effort that would attempt to unify the various research projects into one looking into revolutionary approaches for developing that one &lt;i&gt;single Runtime to rule them all&lt;/i&gt;.&lt;br /&gt;&lt;br /&gt;An interdisciplinary team of engineers &lt;a href="https://github.com/orgs/quarkusio/people" target="_blank"&gt;(non exaustive list)&lt;/a&gt; was gradually formed with each one bringing along with them a ton of ideas and experience from different areas of the Middleware/Enterprise Java spectrum, from kernel design and JVM internals to networking, security and persistence, integration frameworks and performance optimizations (and more). Within 3-4 months the team put in place the base architectural elements and design abstractions and delivered a prototype that satisfied the original goals but also went way beyond. It produced&amp;nbsp; innovations that will be studied and copied over for years to come and provided justification for the project to continue, eventually leading to its public announcement.&lt;br /&gt;&lt;br /&gt;The cool thing about Quarkus is that it works equally well in standard JVM and native compiled mode. By essentially pre-computing application and framework initialization and eliminating dead code (and performing many other optimizations) it can greatly reduce boot time, artifact size and runtime memory requirements (RSS space).&lt;br /&gt;&lt;br /&gt;In one sense things are moving to the opposite direction from the days of early JBoss. Back them we've disrupted the application server space by moving compile time operations into deployment time. With dynamic proxies, a plugable microkernel architecture and an aspect oriented/interceptor design we could avoid precompilation steps and do things you now take for granted like hot-deployment and instant-clustering. Even the collapse of the Web and EJB layers within the same JVM was a selling point. Now we go for extreme distribution with all the benefits and challenges that come with it.&lt;br /&gt;&lt;br /&gt;A very rough rule of thumb is that by using Quarkus in standard JVM mode you can expect your app to boot in a fifth of the time compared to most other popular runtimes and consume about half the memory. In native mode things go crazy: expect one to two orders of magnitude of reduced boot time (supersonic, in the order of tens of milliseconds) and about a fifth to a third of runtime memory consumption (subatomic).&lt;br /&gt;&lt;br /&gt;It's funny to see &lt;a href="https://twitter.com/dandreadis/status/1130798806428205062" target="_blank"&gt;people trying out Quarkus&lt;/a&gt; and reporting an impressive 1.65 seconds boot time for an app that would take 56 seconds to boot on Google Cloud and then the Quarkus team reacts because that looks "slow" and with DNS issues resolved the boot time should be closer to 0,015 seconds! To say it differently, beyond an awesome enabler for writing microservices, Java can now be used as a launching platform for serverless apps and cloud functions. Which in turn means that the millions of Java programmers in the world can keep using their favorite programming language, frameworks and APIs and carry forward their know-how in this brave new cloud native world, while companies can maintain their multi-year investments in Java. This is a game changer, IMO.&lt;br /&gt;&lt;br /&gt;However, to reap the full benefits of Quarkus, frameworks needs to be enabled for it, they need to be Quarked. The team has written extensions for popular frameworks/libraries (listed &lt;a href="https://quarkus.io/extensions/" target="_blank"&gt;here&lt;/a&gt;) that help provide Quarkus' opinionated programming model but our expectation is that the community will step up and provide their own extensions for popular frameworks in order to enhance the Quarkus ecosystem. With enough Quarkus extensions in place the benefits of Ahead of Time Compilation (AOT) will be offered to a larger percent of the Java Developer base in a way that makes the production of native binaries almost transparent to the end user.&lt;br /&gt;&lt;br /&gt;Quarkus offers a lot more than a Supersonic speed, a Subatomic footprint and a set of best of breed technologies and standards. It provides both an imperative and a reactive &lt;a href="https://quarkus.io/vision/continuum" target="_blank"&gt;programming model&lt;/a&gt; and most importantly it brings back &lt;a href="https://quarkus.io/vision/developer-joy" target="_blank"&gt;developer joy&lt;/a&gt; in the life of the programmer. I've been in a couple of Quarkus presentations already and the moment we show how a code change in the IDE is immediately picked up by Quarkus in developer mode the next time the web browser gets refreshed with the change recompiled and the whole app redeployed *instantly*, that moment, the people's reaction is simply priceless. Back in the JBoss days are motto was to"put back the developer into the driver's seat". Same thing now with Quarkus. &lt;br /&gt;&lt;br /&gt;I hope that helps explains a bit some of the excitement behind Quarkus inside and outside Red Hat, and my own personal excitement, too, especially from the moment I was offered the opportunity to come and help run the extended Quarkus team as its Engineering Manager. I am humbled by the sheer amount of brain power behind the project, although, coming from the WildFly/EAP team this is not something new to me. I've seen a few times in my career the type of magic that can happen when you put exceptional people working together on a common stretched goal.&lt;br /&gt;&lt;br /&gt;Being a JBoss alumni and having worked on all transformations that the JBoss Application Server project underwent since version 2.x, I've delivered my last JBoss EAP 7.2 release as Engineering Manager while I was transitioning to Quarkus and handed over the product to &lt;a href="https://twitter.com/tom_jenkinson" target="_blank"&gt;Tom Jenkinson&lt;/a&gt; with whom I've I've worked in the EAP team for many years. Tom was Engineering Manager &amp;amp; Project Lead of the Nayarana Transactions Engine that powers all of JBoss Middleware, a project even older than JBoss AS.&lt;br /&gt;&lt;br /&gt;Tom in turn is supported by &lt;a href="https://twitter.com/bestansberry" target="_blank"&gt;Brian Stansberry&lt;/a&gt; in the role of WildFly project lead, as well as a great team of JBoss/WildFly veterans, so I'm confident that EAP is in the best hands possible to continue evolving and thriving, tracking the latest developments in the Jakarta EE / Microprofile space.&lt;br /&gt;&lt;br /&gt;This is all for now - stay tuned on &lt;a href="https://twitter.com/QuarkusIO" target="_blank"&gt;Quarkus&lt;/a&gt; - and &lt;a href="https://quarkus.io/community/" target="_blank"&gt;join&lt;/a&gt; the revolution. &lt;br /&gt;&lt;br /&gt;/&lt;a href="http://dandreadis.blogspot.com/" target="_blank"&gt;Dimitris&lt;/a&gt;&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/KiJuEE3YJSA" height="1" width="1" alt=""/&gt;</content><summary>Quarkus has made its debut just two and half months ago on March 7th, 2019 with the release of version 0.11 and this public announcement, and since then it has made a lot of buzz in the Java universe while attracting significant developer interest. This is still early days so most people are mostly in the experimental stage getting their feet wet and having a first taste of what it means to write ...</summary><dc:creator>Dimitris Andreadis</dc:creator><dc:date>2019-05-22T16:20:11Z</dc:date><feedburner:origLink>http://dandreadis.blogspot.com/2019/05/getting-quarked.html</feedburner:origLink></entry><entry><title>OpenJDK 8 and 11: Still in safe hands</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/D70ZAxenJUY/" /><category term="Java" /><category term="OpenJDK" /><author><name>Andrew Haley</name></author><id>https://developers.redhat.com/blog/?p=596727</id><updated>2019-05-22T07:00:56Z</updated><published>2019-05-22T07:00:56Z</published><content type="html">&lt;p&gt;In 2018, Oracle announced that it would only provide free public updates and auto-updates of Java SE 8 for commercial users until the end of January 2019. Java 8 is a very important platform, used by millions of programmers, so this was a big deal. The Java community needed to fill the gap.&lt;span id="more-596727"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;In February of this year, I was appointed as the new Lead of the OpenJDK 8 Update Releases Project. A couple of weeks later, I was appointed the new Lead of the OpenJDK 11 Updates Project. This is an important milestone in the history of &lt;a href="https://developers.redhat.com/products/openjdk/overview/"&gt;OpenJDK&lt;/a&gt; and of &lt;a href="https://www.oracle.com/technetwork/java/javase/downloads/index.html"&gt;Java SE&lt;/a&gt; because it&amp;#8217;s the first time that a non-Oracle employee has led the current long-term OpenJDK release project. JDK 8 is still a much-used Java release in industry, and &lt;a href="https://developers.redhat.com/blog/2018/12/10/install-java-rhel8/"&gt;JDK 11&lt;/a&gt; is the current long-term maintenance release.&lt;/p&gt; &lt;p&gt;It&amp;#8217;s now a couple of weeks after the first releases of JDK8u and JDK11u on my watch. I think the process went pretty well, although it was not entirely smooth sailing for the developers. Having said that, we got our releases out on the day, as planned, and so far we&amp;#8217;ve seen no major problems.&lt;/p&gt; &lt;p&gt;There had been a considerable amount of talk, some of it verging on panic, about Oracle ceasing to provide free long-term JDK update binaries to commercial users. At the time, I believed those worries were misplaced. Now, with these releases, I think we&amp;#8217;ve proved it.&lt;/p&gt; &lt;h3&gt;Red Hat&amp;#8217;s role&lt;/h3&gt; &lt;p&gt;Of course, I&amp;#8217;m not doing this on my own. We have a large team of OpenJDK developers within Red Hat and there are many non-Red Hatters working on the releases, too. There are also people doing highly confidential security work that you&amp;#8217;ll not see until it&amp;#8217;s ready.&lt;/p&gt; &lt;p&gt;It&amp;#8217;s important to clarify Red Hat&amp;#8217;s role in all of this. We are one of the largest contributors to OpenJDK, we have been for many years, and we will continue to be. However, we have not &amp;#8220;taken over&amp;#8221; OpenJDK updates projects, and neither would we want to. Our role in OpenJDK, as in many other projects, is to be a catalyst in communities of customers, contributors, and partners. This means that we work with others, some of whom are our competitors, in the best interests of the project. The changes Red Hat makes to OpenJDK updates are based on patches from many sources. We wrote many of them ourselves, of course, but we take them from all of the OpenJDK contributors.&lt;/p&gt; &lt;p&gt;My role in this as Project Lead is to supervise, encourage, and occasionally make decisions about how best to protect these precious jewels, the OpenJDK updates. I have to do so without favoring any vendor. Not only must I be impartial, but I must also be seen by everyone to be so. This way of behaving is in Red Hat&amp;#8217;s best interests: a better OpenJDK for everyone encourages more users and more contributors. In the end, the best outcome for Red Hat is the best outcome for everyone.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F05%2F22%2Fopenjdk-8-and-11-still-in-safe-hands%2F&amp;#38;linkname=OpenJDK%208%20and%2011%3A%20Still%20in%20safe%20hands" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F05%2F22%2Fopenjdk-8-and-11-still-in-safe-hands%2F&amp;#38;linkname=OpenJDK%208%20and%2011%3A%20Still%20in%20safe%20hands" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_google_plus" href="https://www.addtoany.com/add_to/google_plus?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F05%2F22%2Fopenjdk-8-and-11-still-in-safe-hands%2F&amp;#38;linkname=OpenJDK%208%20and%2011%3A%20Still%20in%20safe%20hands" title="Google+" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F05%2F22%2Fopenjdk-8-and-11-still-in-safe-hands%2F&amp;#38;linkname=OpenJDK%208%20and%2011%3A%20Still%20in%20safe%20hands" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F05%2F22%2Fopenjdk-8-and-11-still-in-safe-hands%2F&amp;#38;linkname=OpenJDK%208%20and%2011%3A%20Still%20in%20safe%20hands" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F05%2F22%2Fopenjdk-8-and-11-still-in-safe-hands%2F&amp;#38;linkname=OpenJDK%208%20and%2011%3A%20Still%20in%20safe%20hands" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F05%2F22%2Fopenjdk-8-and-11-still-in-safe-hands%2F&amp;#38;linkname=OpenJDK%208%20and%2011%3A%20Still%20in%20safe%20hands" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F05%2F22%2Fopenjdk-8-and-11-still-in-safe-hands%2F&amp;#38;linkname=OpenJDK%208%20and%2011%3A%20Still%20in%20safe%20hands" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F05%2F22%2Fopenjdk-8-and-11-still-in-safe-hands%2F&amp;#038;title=OpenJDK%208%20and%2011%3A%20Still%20in%20safe%20hands" data-a2a-url="https://developers.redhat.com/blog/2019/05/22/openjdk-8-and-11-still-in-safe-hands/" data-a2a-title="OpenJDK 8 and 11: Still in safe hands"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/05/22/openjdk-8-and-11-still-in-safe-hands/"&gt;OpenJDK 8 and 11: Still in safe hands&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/D70ZAxenJUY" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;In 2018, Oracle announced that it would only provide free public updates and auto-updates of Java SE 8 for commercial users until the end of January 2019. Java 8 is a very important platform, used by millions of programmers, so this was a big deal. The Java community needed to fill the gap. In February [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/05/22/openjdk-8-and-11-still-in-safe-hands/"&gt;OpenJDK 8 and 11: Still in safe hands&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer Blog&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2019/05/22/openjdk-8-and-11-still-in-safe-hands/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">596727</post-id><dc:creator>Andrew Haley</dc:creator><dc:date>2019-05-22T07:00:56Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/05/22/openjdk-8-and-11-still-in-safe-hands/</feedburner:origLink></entry><entry><title>4.1.0 released</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/BIrYVF4gNk4/410-released.html" /><category term="feed_group_name_jgroups" scheme="searchisko:content:tags" /><category term="feed_name_belasblog" scheme="searchisko:content:tags" /><category term="graalvm quarkus network sniffers" scheme="searchisko:content:tags" /><author><name>Bela Ban</name></author><id>searchisko:content:id:jbossorg_blog-4_1_0_released</id><updated>2019-05-21T15:25:36Z</updated><published>2019-05-21T15:25:00Z</published><content type="html">I'm happy to announce that I just released JGroups 4.1.0!&lt;br /&gt;&lt;br /&gt;Why the bump to a new minor version?&lt;br /&gt;&lt;br /&gt;I had to make some API changes and - as I'm trying to avoid that in micro releases - I decided to bump the version to 4.1.0. The changes involve removing a few (rather exotic) JChannel constructors, but chances are you've never used any of them anyway. The other change is a signature change in Streamable, where I now throw IOExceptions and ClassNotFoundExceptions instead of simple Exceptions.&lt;br /&gt;&lt;br /&gt;Here's a list of the major changes:&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;&lt;a href="http://graalvm.org/"&gt;GraalVM&lt;/a&gt; / &lt;a href="http://www.quarkus.io/"&gt;Quarkus&lt;/a&gt; support&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;JGroups can now be compiled into a native executable using GraalVM's &lt;span style="font-family: &amp;quot;Courier New&amp;quot;, Courier, monospace;"&gt;native-image&lt;/span&gt;. This is a very cool feature; I've used &lt;a href="https://github.com/belaban/JGroups/blob/master/tests/perf/org/jgroups/tests/perf/ProgrammaticUPerf2.java"&gt;ProgrammaticUPerf2&lt;/a&gt; to start a member in ~&lt;b&gt;1 millisecond&lt;/b&gt;!&lt;/li&gt;&lt;li&gt;This means JGroups can now be used by other applications to create native binaries. Not yet very polished, and I'll write a Quarkus extension next, but usable by folks who know GraalVM...&lt;/li&gt;&lt;li&gt;I'll blog about the port to GraalVM and the Quarkus extension (once it's ready) next, so stay tuned!&lt;/li&gt;&lt;li&gt;&lt;a href="https://issues.jboss.org/browse/JGRP-2332"&gt;https://issues.jboss.org/browse/JGRP-2332&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://issues.jboss.org/browse/JGRP-2341"&gt;https://issues.jboss.org/browse/JGRP-2341&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;&amp;nbsp;Parsing of network packets&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;When using network sniffers, such as wireshark, tshark or tcpdump, the resulting PCAP files can be parsed by JGroups, displaying the contents of network packets as JGroups messages&lt;/li&gt;&lt;li&gt;This can be done &lt;b&gt;offline&lt;/b&gt; (e.g. reading a previously recorded PCAP file) or &lt;b&gt;online&lt;/b&gt; (e.g. by piping the output of tshark into JGroups).&lt;/li&gt;&lt;li&gt;I'll write a separate blog post about this shortly&lt;/li&gt;&lt;li&gt;&lt;a href="https://issues.jboss.org/browse/JGRP-2311"&gt;https://issues.jboss.org/browse/JGRP-2311&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Documentation: &lt;a href="http://www.jgroups.org/manual4/index.html#_analyzing_wire_format_packets"&gt;http://www.jgroups.org/manual4/index.html#_analyzing_wire_format_packets&lt;/a&gt; &lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;Diagnostics handler without reflection&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;This is related to the GraalVM port: the default DiagnosticsHandler (used by probe.sh) uses reflection, which is not allowed in GraalVM&lt;/li&gt;&lt;li&gt;This additional DiagnosticsHandler can be used instead of the default one when creating a native binary of an application. The advantage is that probe.sh still works, even in a native binary.&lt;/li&gt;&lt;li&gt;&lt;a href="https://issues.jboss.org/browse/JGRP-2337"&gt;https://issues.jboss.org/browse/JGRP-2337&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;RpcDispatcher without reflection&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;This is similar to the above bullet item: since reflection is not allowed in the GraalVM at runtime, reflective calls by RpcDispatcher would have to be defined in a config file passed to &lt;span style="font-family: &amp;quot;Courier New&amp;quot;, Courier, monospace;"&gt;native-image&lt;/span&gt;, when creating a native binary.&amp;nbsp; &lt;/li&gt;&lt;li&gt;I therefore added a way to invoke methods, without the need to use reflection&lt;/li&gt;&lt;li&gt;For details see &lt;a href="https://issues.jboss.org/browse/JGRP-2338"&gt;https://issues.jboss.org/browse/JGRP-2338&lt;/a&gt; or the documentation at &lt;a href="http://www.jgroups.org/manual4/index.html#_methodlookup_and_methoddispatcher"&gt;http://www.jgroups.org/manual4/index.html#_methodlookup_and_methoddispatcher&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;&amp;nbsp;Probe: support when running under TCP&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;Also required when running on GraalVM: since JGroups currently only supports TCP (MulticastSockets don't currently work on GraalVM), probe.sh needs to be given the address of *one* member, to fetch information about all members&lt;/li&gt;&lt;li&gt;&lt;a href="https://issues.jboss.org/browse/JGRP-2336"&gt;https://issues.jboss.org/browse/JGRP-2336&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;&amp;nbsp;Change in how IPv4/IPv6 addresses are picked&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;The new algorithm centers around &lt;span style="font-family: &amp;quot;Courier New&amp;quot;, Courier, monospace;"&gt;bind_addr&lt;/span&gt; defined in the transport (UDP, TCP, TCP_NIO2); the value of this address determines how other addresses (such as loopback, site_local, global, localhost or default values) are resolved.&lt;/li&gt;&lt;li&gt;Example: if &lt;span style="font-family: &amp;quot;Courier New&amp;quot;, Courier, monospace;"&gt;bind_addr=::1&lt;/span&gt;, then all other addresses that are not explicitly defined will be IPv6. If &lt;span style="font-family: &amp;quot;Courier New&amp;quot;, Courier, monospace;"&gt;bind_addr=127.0.0.1&lt;/span&gt;, the all other addresses will be IPv4 addresses.&lt;/li&gt;&lt;li&gt;The advantage of this is that you can run a JGroups stack using IPv4 and another one using IPv6 &lt;i&gt;in the same process&lt;/i&gt;!&lt;/li&gt;&lt;li&gt;&lt;a href="https://issues.jboss.org/browse/JGRP-2343"&gt;https://issues.jboss.org/browse/JGRP-2343&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;A complete list of JIRA issues is at &lt;a href="https://issues.jboss.org/projects/JGRP/versions/12341388"&gt;https://issues.jboss.org/projects/JGRP/versions/12341388&lt;/a&gt;.&amp;nbsp;&lt;br /&gt;Please post questions/issues to the mailing list at &lt;a href="https://groups.google.com/forum/#!forum/jgroups-dev"&gt;https://groups.google.com/forum/#!forum/jgroups-dev&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;Enjoy!&lt;br /&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/BIrYVF4gNk4" height="1" width="1" alt=""/&gt;</content><summary>I'm happy to announce that I just released JGroups 4.1.0! Why the bump to a new minor version? I had to make some API changes and - as I'm trying to avoid that in micro releases - I decided to bump the version to 4.1.0. The changes involve removing a few (rather exotic) JChannel constructors, but chances are you've never used any of them anyway. The other change is a signature change in Streamable...</summary><dc:creator>Bela Ban</dc:creator><dc:date>2019-05-21T15:25:00Z</dc:date><feedburner:origLink>http://belaban.blogspot.com/2019/05/410-released.html</feedburner:origLink></entry><entry><title>Byteman 4.0.7 has been released</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/RmpkqU6A6m4/byteman-407-has-been-released.html" /><category term="feed_group_name_byteman" scheme="searchisko:content:tags" /><category term="feed_name_byteman" scheme="searchisko:content:tags" /><author><name>Andrew Dinn</name></author><id>searchisko:content:id:jbossorg_blog-byteman_4_0_7_has_been_released</id><updated>2019-05-21T09:46:00Z</updated><published>2019-05-21T09:46:00Z</published><content type="html">Byteman 4.0.7 is now available from the &lt;a href="http://www.jboss.org/byteman/downloads"&gt;Byteman downloads page&lt;/a&gt; and from the &lt;a href="https://oss.sonatype.org/index.html#nexus-search;quick%7Ebyteman"&gt;Maven Central repository&lt;/a&gt;. It is the latest update release for use on JDK9+ runtimes. It is also recommended as the preferred release for use on JDK8- runtimes.&lt;br /&gt;&lt;br /&gt;Byteman 4.0.7 is a maintenance release which includes a few minor bug fixes. More details are provided in the &lt;a href="http://downloads.jboss.org/byteman/latest/ReleaseNotes.txt"&gt;Release Notes&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/RmpkqU6A6m4" height="1" width="1" alt=""/&gt;</content><summary>Byteman 4.0.7 is now available from the Byteman downloads page and from the Maven Central repository. It is the latest update release for use on JDK9+ runtimes. It is also recommended as the preferred release for use on JDK8- runtimes. Byteman 4.0.7 is a maintenance release which includes a few minor bug fixes. More details are provided in the Release Notes.</summary><dc:creator>Andrew Dinn</dc:creator><dc:date>2019-05-21T09:46:00Z</dc:date><feedburner:origLink>http://bytemanblog.blogspot.com/2019/05/byteman-407-has-been-released.html</feedburner:origLink></entry><entry><title>Apache Camel development on Eclipse Che 7</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/puFOfMUKOQQ/" /><category term="Developer Tools" /><category term="Eclipse Che" /><category term="Red Hat Integration" /><category term="apache camel" /><category term="Eclipse" /><author><name>Aur√©lien Pupier</name></author><id>https://developers.redhat.com/blog/?p=597287</id><updated>2019-05-21T07:00:32Z</updated><published>2019-05-21T07:00:32Z</published><content type="html">&lt;p&gt;&lt;a href="https://camel.apache.org"&gt;Apache Camel&lt;/a&gt; development is improving on &lt;a href="https://www.eclipse.org/che/"&gt;Eclipse Che&lt;/a&gt; 7 compared to Che 6. On Che 6, it is limited to XML DSL and without classical XSD-based XML support. With Che 7, Camel Java DSL is available and XSD-based XML support is working nicely with the Camel XML DSL support. Please note that Che 7 is still in beta.&lt;br /&gt; &lt;span id="more-597287"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;Camel language features available&lt;/h2&gt; &lt;p&gt;Inside the same editor, there is access to classic XML tooling and Camel XML DSL support.&lt;/p&gt; &lt;p&gt;Classic XML Tooling completion based on XSD:&lt;br /&gt; &lt;img class=" aligncenter size-large wp-image-597457 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/05/compeltionXMLXSD-1024x668.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/05/compeltionXMLXSD-1024x668.png" alt="XMl tag completion based on Camel xsd" width="640" height="418" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/05/compeltionXMLXSD-1024x668.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2019/05/compeltionXMLXSD-300x196.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/05/compeltionXMLXSD-768x501.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/05/compeltionXMLXSD.png 1236w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/p&gt; &lt;p&gt;Camel XML DSL Tooling completion:&lt;br /&gt; &lt;img class=" aligncenter size-large wp-image-597467 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/05/completionXMLCamel-1024x668.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/05/completionXMLCamel-1024x668.png" alt="Camel URI completion with Camel XML DSL" width="640" height="418" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/05/completionXMLCamel-1024x668.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2019/05/completionXMLCamel-300x196.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/05/completionXMLCamel-768x501.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/05/completionXMLCamel.png 1236w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/p&gt; &lt;p&gt;Classic XML tooling validation:&lt;br /&gt; &lt;img class=" aligncenter size-large wp-image-597487 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/05/validationXMlXSD-1024x668.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/05/validationXMlXSD-1024x668.png" alt="Validation based on Camel XML xsd" width="640" height="418" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/05/validationXMlXSD-1024x668.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2019/05/validationXMlXSD-300x196.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/05/validationXMlXSD-768x501.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/05/validationXMlXSD.png 1236w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/p&gt; &lt;p&gt;Camel XML DSL tooling validation:&lt;br /&gt; &lt;img class=" aligncenter size-large wp-image-597507 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/05/validationXMLCamel-1024x668.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/05/validationXMLCamel-1024x668.png" alt="Camel XML DSL validation of Camel URI" width="640" height="418" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/05/validationXMLCamel-1024x668.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2019/05/validationXMLCamel-300x196.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/05/validationXMLCamel-768x501.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/05/validationXMLCamel.png 1236w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/p&gt; &lt;p&gt;Inside the same editor, there is access to classic Java tooling and Camel Java DSL support.&lt;/p&gt; &lt;p&gt;Classic Java tooling completion:&lt;br /&gt; &lt;img class=" aligncenter size-large wp-image-597527 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/05/compeltionJavaClassic-1024x668.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/05/compeltionJavaClassic-1024x668.png" alt="Classic Java completion" width="640" height="418" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/05/compeltionJavaClassic-1024x668.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2019/05/compeltionJavaClassic-300x196.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/05/compeltionJavaClassic-768x501.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/05/compeltionJavaClassic.png 1236w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/p&gt; &lt;p&gt;Camel Java DSL completion:&lt;br /&gt; &lt;img class=" aligncenter size-large wp-image-597537 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/05/compeltionJavaCamel-1024x668.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/05/compeltionJavaCamel-1024x668.png" alt="Camel URI completion with Camel Java DSL" width="640" height="418" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/05/compeltionJavaCamel-1024x668.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2019/05/compeltionJavaCamel-300x196.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/05/compeltionJavaCamel-768x501.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/05/compeltionJavaCamel.png 1236w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/p&gt; &lt;p&gt;Classic Java tooling validation:&lt;br /&gt; &lt;img class=" aligncenter size-large wp-image-597557 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/05/validationJavaClassic-1024x668.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/05/validationJavaClassic-1024x668.png" alt="Classic Java validation" width="640" height="418" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/05/validationJavaClassic-1024x668.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2019/05/validationJavaClassic-300x196.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/05/validationJavaClassic-768x501.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/05/validationJavaClassic.png 1236w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/p&gt; &lt;p&gt;Camel Java DSL tooling validation:&lt;br /&gt; &lt;img class=" aligncenter size-large wp-image-597567 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/05/validationJavaCamel-1024x668.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/05/validationJavaCamel-1024x668.png" alt="Camel URI validation with Java DSL" width="640" height="418" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/05/validationJavaCamel-1024x668.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2019/05/validationJavaCamel-300x196.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/05/validationJavaCamel-768x501.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/05/validationJavaCamel.png 1236w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/p&gt; &lt;h2&gt;How to configure on che.openshift.io&lt;/h2&gt; &lt;p&gt;Currently, some advanced steps are needed to have all extensions working together on a resource-limited Che environment, which is the default for che.openshift.io. Let&amp;#8217;s see how to activate it.&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Go to &lt;a href="https://che.openshift.io"&gt;che.openshift.io&lt;/a&gt; (you will have to register if you&amp;#8217;ve not done so already).&lt;/li&gt; &lt;li&gt;Create a workspace based on Che 7.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;img class=" aligncenter size-large wp-image-597297 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/05/createWorkspaceChe7-1024x555.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/05/createWorkspaceChe7-1024x555.png" alt="Create Che 7 Workspace" width="640" height="347" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/05/createWorkspaceChe7-1024x555.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2019/05/createWorkspaceChe7-300x163.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/05/createWorkspaceChe7-768x416.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Wait that workspace creation is finished.&lt;/li&gt; &lt;li&gt;Import the Camel/Fuse project that you want.&lt;/li&gt; &lt;li&gt;Go back to workspace configuration by using the top-left yellow arrow and clicking on Workspaces.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;img class=" aligncenter size-large wp-image-597597 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/05/GoToSWorkspaceConfig-1024x668.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/05/GoToSWorkspaceConfig-1024x668.png" alt="Go to workspace config" width="640" height="418" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/05/GoToSWorkspaceConfig-1024x668.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2019/05/GoToSWorkspaceConfig-300x196.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/05/GoToSWorkspaceConfig-768x501.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/05/GoToSWorkspaceConfig.png 1236w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Click on the running workspace.&lt;/li&gt; &lt;li&gt;Click stop at the top right.&lt;/li&gt; &lt;li&gt;Go to Plugins tab.&lt;/li&gt; &lt;li&gt;Enable Language Support for Apache Camel, Language Support for Java and XML.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;img class=" aligncenter size-large wp-image-597807 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/05/enablePlugins-2-1024x555.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/05/enablePlugins-2-1024x555.png" alt="Enable Camel, Java and XML plugins" width="640" height="347" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/05/enablePlugins-2-1024x555.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2019/05/enablePlugins-2-300x163.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/05/enablePlugins-2-768x416.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Go to config tab.&lt;/li&gt; &lt;li&gt;Search for &amp;#8220;attributes&amp;#8221;, add memory limits for each of the plugins, you should end with something like: &lt;pre&gt;"attributes": { "sidecar.redhat/java.memory_limit": "1280Mi", "sidecar.camel-tooling/vscode-apache-camel.memory_limit": "128Mi", "sidecar.redhat/vscode-xml.memory_limit": "128Mi", "sidecar.eclipse/che-theia.memory_limit": "512Mi", "editor": "eclipse/che-theia/next", "plugins": "eclipse/che-machine-exec-plugin/0.0.1,redhat/java/0.43.0,camel-tooling/vscode-apache-camel/0.0.14,redhat/vscode-xml/0.5.1" }&lt;/pre&gt; &lt;/li&gt; &lt;li&gt;Click on Open button on top right.&lt;/li&gt; &lt;li&gt;Open a Java file and wait that the Java Language Server has started (it can take several minutes).&lt;/li&gt; &lt;li&gt;Enjoy!&lt;/li&gt; &lt;/ul&gt; &lt;h2&gt;&lt;strong&gt;What&amp;#8217;s next?&lt;/strong&gt;&lt;/h2&gt; &lt;p&gt;As you&amp;#8217;ve noticed, the installation is currently a bit cumbersome as it requires you to touch the YAML config file. Don&amp;#8217;t worry; there is work in progress to improve the installation experience, such as providing a &lt;a href="https://github.com/eclipse/che/issues/13182"&gt;specific Camel stack&lt;/a&gt;. This will allow you to create a workspace preconfigured, which means doing only the first three steps instead of the 11 steps of the configuration. Several other features are in the works by incorporating existing VS Code extensions inside Che 7. Stay tuned.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F05%2F21%2Fapache-camel-development-on-eclipse-che-7%2F&amp;#38;linkname=Apache%20Camel%20development%20on%20Eclipse%20Che%207" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F05%2F21%2Fapache-camel-development-on-eclipse-che-7%2F&amp;#38;linkname=Apache%20Camel%20development%20on%20Eclipse%20Che%207" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_google_plus" href="https://www.addtoany.com/add_to/google_plus?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F05%2F21%2Fapache-camel-development-on-eclipse-che-7%2F&amp;#38;linkname=Apache%20Camel%20development%20on%20Eclipse%20Che%207" title="Google+" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F05%2F21%2Fapache-camel-development-on-eclipse-che-7%2F&amp;#38;linkname=Apache%20Camel%20development%20on%20Eclipse%20Che%207" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F05%2F21%2Fapache-camel-development-on-eclipse-che-7%2F&amp;#38;linkname=Apache%20Camel%20development%20on%20Eclipse%20Che%207" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F05%2F21%2Fapache-camel-development-on-eclipse-che-7%2F&amp;#38;linkname=Apache%20Camel%20development%20on%20Eclipse%20Che%207" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F05%2F21%2Fapache-camel-development-on-eclipse-che-7%2F&amp;#38;linkname=Apache%20Camel%20development%20on%20Eclipse%20Che%207" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F05%2F21%2Fapache-camel-development-on-eclipse-che-7%2F&amp;#38;linkname=Apache%20Camel%20development%20on%20Eclipse%20Che%207" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F05%2F21%2Fapache-camel-development-on-eclipse-che-7%2F&amp;#038;title=Apache%20Camel%20development%20on%20Eclipse%20Che%207" data-a2a-url="https://developers.redhat.com/blog/2019/05/21/apache-camel-development-on-eclipse-che-7/" data-a2a-title="Apache Camel development on Eclipse Che 7"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/05/21/apache-camel-development-on-eclipse-che-7/"&gt;Apache Camel development on Eclipse Che 7&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/puFOfMUKOQQ" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;Apache Camel development is improving on Eclipse Che 7 compared to Che 6. On Che 6, it is limited to XML DSL and without classical XSD-based XML support. With Che 7, Camel Java DSL is available and XSD-based XML support is working nicely with the Camel XML DSL support. Please note that Che 7 is [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/05/21/apache-camel-development-on-eclipse-che-7/"&gt;Apache Camel development on Eclipse Che 7&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer Blog&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2019/05/21/apache-camel-development-on-eclipse-che-7/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">597287</post-id><dc:creator>Aur√©lien Pupier</dc:creator><dc:date>2019-05-21T07:00:32Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/05/21/apache-camel-development-on-eclipse-che-7/</feedburner:origLink></entry><entry><title>Subsecond deployment and startup of Apache Camel applications</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/zTr8J0eHMrg/" /><category term="JBoss Fuse" /><category term="Kubernetes" /><category term="Modern App Dev" /><category term="Quarkus" /><category term="Red Hat Integration" /><category term="apache camel" /><category term="cloud native" /><category term="kubernetes" /><author><name>Bilgin Ibryam</name></author><id>https://developers.redhat.com/blog/?p=596967</id><updated>2019-05-20T07:00:55Z</updated><published>2019-05-20T07:00:55Z</published><content type="html">&lt;p&gt;The integration space is in constant change. Many open source projects and closed source technologies did not withstand the tests of time and have disappeared from the middleware stacks for good. After a decade, however, &lt;a href="https://camel.apache.org/"&gt;Apache Camel&lt;/a&gt; is still here and becoming even stronger for the next decade of integration. In this article, I&amp;#8217;ll provide some history of Camel and then describe two changes coming to Apache Camel now (and later to &lt;a href="https://developers.redhat.com/products/fuse/overview/"&gt;Red Hat Fuse&lt;/a&gt;) and why they are important for developers. I call these changes &lt;em&gt;subsecond deployment&lt;/em&gt; and &lt;em&gt;subsecond startup&lt;/em&gt; of Camel applications.&lt;span id="more-596967"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h3&gt;Gang of Four for integration&lt;/h3&gt; &lt;p&gt;Apache Camel started life as an implementation of the &lt;em&gt;Enterprise Integration Patterns&lt;/em&gt; (&lt;a href="https://www.enterpriseintegrationpatterns.com/"&gt;EIP&lt;/a&gt;) book. Today, these patterns are the equivalent of the object-oriented &lt;a href="https://www.amazon.com/Design-Patterns-Elements-Reusable-Object-Oriented/dp/0201633612/ref=sr_1_3?crid=S8G9XY6IXKGL&amp;#38;keywords=gang+of+four+design+patterns&amp;#38;qid=1557951062&amp;#38;s=books&amp;#38;sprefix=gang+of+four%2Cstripbooks%2C168&amp;#38;sr=1-3"&gt;Gang of Four Design Patterns&lt;/a&gt; but for messaging and integration domain. They are agnostic of programing language, platform, architecture, and provide a universal language, notation, and description of the forces around fundamental messaging primitives.&lt;/p&gt; &lt;p&gt;But the Camel community did not stop with these patterns; they kept evolving and adding newer patterns from service-oriented architecture (SOA), microservices, cloud-native, and serverless paradigms. As a result, Camel turned into a generic pattern-based integration framework suitable for multiple architectures.&lt;/p&gt; &lt;h3&gt;Universal library consumption model&lt;/h3&gt; &lt;p&gt;Although the patterns gave the initial spark to Camel, its endpoints quickly became popular and turned into a universal protocol for using Java-based integration libraries as connectors. Today, there are &lt;a href="http://camel.apache.org/components.html"&gt;hundreds&lt;/a&gt; of Java libraries that can be used as Camel connectors using the Camel endpoint notation. It takes a while to realize that Camel can also be used without the EIPs and the routing engine. It can act as a connector framework where all libraries are consumed as universal URIs without a need to understand the library-specific factories and configurations that vary widely across Java libraries.&lt;/p&gt; &lt;h3&gt;The right level of abstraction&lt;/h3&gt; &lt;p&gt;Some developers will tell you that it is possible to do integration without Camel, and they are right for about 80% of the easy use cases, but not for the other 20% of cases that can turn a project into a multi-year frustrating experience. What they do not realize is that, without Camel, there are multiple manual ways of doing the same thing, but none are validated by the experience of hundreds of open source developers. And, without Camel, an integration project can quickly turn into a bespoke, homegrown framework that nobody wants to work on.&lt;/p&gt; &lt;p&gt;&lt;b&gt;Doing integration is easy, but doing good integration that will evolve and grow for many years, by many teams, is hard.&lt;/b&gt; Camel addresses this challenge with universal patterns and connectors, combined with integration focused&lt;a href="https://developers.redhat.com/blog/2017/12/21/camel-dsl-choose/"&gt; DSLs&lt;/a&gt;, that have passed the test of time.&lt;/p&gt; &lt;p&gt;If you think you don&amp;#8217;t need Camel, you are either thinking for short-term gains or you are not realizing yet how complex integration can become.&lt;/p&gt; &lt;h3&gt;Embracing change&lt;/h3&gt; &lt;p&gt;It takes only a couple of painful experiences in large integration projects to start appreciating Camel. But Camel is great not only because it was built on the work of great minds, but also because it evolves thanks to the world&amp;#8217;s knowledge, shared through the open source model and its networking effects. Camel started as the routing layer in enterprise service buses (ESBs) during the SOA period with a lot of focus on XML, WS, JBI, OSGI, etc., but it was quickly adapted for REST, Swagger, circuit breakers, SAGAs, and Spring Boot in the microservices era.&lt;/p&gt; &lt;p&gt;And, it did not stop there. With containers and &lt;a href="https://developers.redhat.com/topics/kubernetes/"&gt;Kubernetes&lt;/a&gt;, and now serverless architecture, Camel keeps embracing change. That&amp;#8217;s because Camel is written for integrating changing environments, and Camel itself grows and shines on change. Camel is a change enabling library for integration.&lt;/p&gt; &lt;h3&gt;Behind the scene engine&lt;/h3&gt; &lt;p&gt;One of Camel&amp;#8217;s secret sauces is that it is a non-intrusive, unopinionated, small (5MB and getting smaller) integration library without any affinity for where and how you consume it. If you notice, this is the opposite of an ESB, which commonly Camel is confused with because of its extensive capabilities. Over the years, Camel has been used as the internal engine powering projects such as:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Apache ServiceMix ESB&lt;/li&gt; &lt;li&gt;Apache ActiveMQ&lt;/li&gt; &lt;li&gt;Talend ESB&lt;/li&gt; &lt;li&gt;JBoss Switchyard&lt;/li&gt; &lt;li&gt;JBoss Fuse Service Works&lt;/li&gt; &lt;li&gt;Red Hat Fuse&lt;/li&gt; &lt;li&gt;&lt;a href="https://syndesis.io/"&gt;Fuse Online/Syndesis&lt;/a&gt;&lt;/li&gt; &lt;li&gt;And many other frameworks mentioned&lt;a href="http://camel.apache.org/user-stories.html"&gt; here&lt;/a&gt;.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;You can use Camel alone, embed it with Apache Tomcat, with Spring Boot starters, JBoss WildFly, Apache Karaf, Vert.x, &lt;a href="https://quarkus.io/extensions/"&gt;Quarkus&lt;/a&gt;, you name it. Camel doesn&amp;#8217;t care, and it will bring superpowers to your project every time.&lt;/p&gt; &lt;h2&gt;Looking to the future&lt;/h2&gt; &lt;p&gt;I cannot predict what the ideal integration stack will look like in a decade‚Äîno one can. But I can tell you about two novelties coming into Apache Camel now (and to&lt;a href="https://www.redhat.com/en/technologies/jboss-middleware/fuse"&gt; Red Hat Fuse&lt;/a&gt; later) and why they will have a noticeable positive effect for the developers and the business. I call these changes &lt;em&gt;subsecond deployment&lt;/em&gt; and &lt;em&gt;subsecond startup &lt;/em&gt;of Camel applications.&lt;/p&gt; &lt;h3&gt;Subsecond deployments to Kubernetes&lt;/h3&gt; &lt;p&gt;There was a time when cloud-native meant different technologies. Today, after a few years of natural selection and consolidation in the industry, cloud-native means applications created for container-based environments, such as Kubernetes and its ecosystem of projects within the&lt;a href="https://www.cncf.io/"&gt;¬†Cloud Native Computing Foundation&lt;/a&gt;. Even with this definition, there are many shades of cloud-native, from running a monolithic non-scalable application in a container, to triggering a function that is fully embracing the cloud-native development and management practices.&lt;/p&gt; &lt;p&gt;The Camel community has realized that Kubernetes is the next generation &lt;a href="https://developers.redhat.com/blog/2018/06/28/why-kubernetes-is-the-new-application-server/"&gt;application runtime&lt;/a&gt;, and it is steadily working on making Camel a Kubernetes native integration engine. The same way Camel is a first-class citizen in &lt;a href="https://www.osgi.org/developer/architecture/"&gt;OSGi&lt;/a&gt; containers, &lt;a href="https://www.oracle.com/technetwork/java/javaee/overview/index.html"&gt;Java EE&lt;/a&gt; application servers, other fat-jar runtimes, Camel is becoming a first-class citizen on Kubernetes, integrating deeply and benefiting from the resiliency and scalability offered by the platform.&lt;/p&gt; &lt;p&gt;Here are a few of the many enhancement efforts happening in this direction:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;b&gt;Deeper Kubernetes integration&lt;/b&gt; ‚Äî Kubernetes API connector, full health-check API implementation for Camel subsystems, service discovery through a new ServiceCall EIP, configuration management using ConfigMaps. Then a set of application patterns with special handling on Kubernetes, such as: clustered &lt;a href="https://www.nicolaferraro.me/2017/10/17/creating-clustered-singleton-services-on-kubernetes/"&gt;singleton routes&lt;/a&gt;, &lt;a href="https://access.redhat.com/documentation/en-us/red_hat_fuse/7.2/html/fuse_on_openshift_guide/camel-spring-boot_xa"&gt;scalable XA transactions&lt;/a&gt; (because sometimes, you have to), SAGA pattern &lt;a href="https://www.nicolaferraro.me/2018/04/25/saga-pattern-in-apache-camel/"&gt;implementation&lt;/a&gt;, etc.&lt;/li&gt; &lt;li&gt;&lt;b&gt;Cloud-native integrations&lt;/b&gt; ‚Äî Support for other cloud-native projects such as exposing&lt;a href="https://brunonetid.github.io/2017/11/27/camel-prometheus-openshift.html"&gt; Camel metrics for Prometheus&lt;/a&gt;, &lt;a href="https://medium.com/jaegertracing/using-jaeger-to-trace-an-apache-camel-application-2b8118efbb4d"&gt;tracing Camel routes&lt;/a&gt; through Jaeger, JSON-formatted logging for log aggregation, etc.&lt;/li&gt; &lt;li&gt;&lt;b&gt;Immutable runtimes&lt;/b&gt; ‚Äî Whether you use the minimalist immutable Apache Karaf packaging or Spring Boot, Camel is a first-class citizen ready to put in a container image. There are also Spring Boot starter implementations for all Camel connectors, integration with routes, properties, converters, and whatnot.&lt;/li&gt; &lt;li&gt;&lt;b&gt;Camel 3&lt;/b&gt; ‚Äî Apache Camel 3&lt;a href="https://medium.com/@davsclaus/work-on-apache-camel-3-has-finally-started-e6a4276a95d5"&gt;¬†is a fact&lt;/a&gt; and actively progressing. A big theme for Camel 3 is to make it more modular, smaller, with faster startup time, reactive, non-blocking, and triple awesome. This is the groundwork needed to restructure Camel for the future cloud workloads.&lt;/li&gt; &lt;li&gt;&lt;b&gt;Knative integration &lt;/b&gt;‚Äî &lt;a href="https://cloud.google.com/knative/"&gt;Knative&lt;/a&gt; is an effort started by Google to bring some order and standardization in the serverless world dominated by Amazon Lambda. And Camel is among the projects that &lt;a href="https://www.nicolaferraro.me/2018/12/10/camel-k-on-knative/"&gt;integrate&lt;/a&gt; with Knative primitives from early days and enhances the Knative ecosystem with hundreds of connectors acting as generic &lt;a href="https://knative.dev/development/eventing/samples/apache-camel-source/"&gt;event sources&lt;/a&gt;.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;And here is a real game-changer initiative: &lt;a href="https://www.nicolaferraro.me/2018/10/15/introducing-camel-k/"&gt;&lt;b&gt;Camel K&lt;/b&gt;&lt;/a&gt; (a.k.a. deep Kubernetes integration for Camel).&lt;/p&gt; &lt;p&gt;We have seen that Camel is typically embedded into the latest modern runtime where it acts as the developer-friendly integration engine behind the scene. In the same way that Camel used to benefit from Java EE services in the past for hot-deployment, configuration management, transaction management, etc., today Camel K allows Camel runtime to benefit from Kubernetes features for high-availability, resiliency, self-healing, auto-scaling, and basically distributed application management in general.&lt;/p&gt; &lt;p&gt;Camel K achieves this through a CLI and an &lt;a href="https://coreos.com/operators/"&gt;Operator&lt;/a&gt;, where the latter is able to understand the Camel applications, its build-time dependencies, runtime needs, and make intelligent choices from the underlying Kubernetes platform and its additional capabilities (from Knative, Istio, OpenShift, and others in the future). It can automate everything on the cluster, such as picking the best-suited container image and runtime management model and updating them when needed. The CLI can automate the tasks that are on the developer machine, such as observing the code changes, streaming those to the Kubernetes cluster, printing the logs from the running Pods, etc.&lt;/p&gt; &lt;div id="attachment_596977" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-596977" class="wp-image-596977 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2019/05/image3-1024x483.png" alt="Camel-K operator" width="640" height="302" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/05/image3-1024x483.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2019/05/image3-300x141.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/05/image3-768x362.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/05/image3.png 1254w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-596977" class="wp-caption-text"&gt;Camel route auto-deployment to Kubernetes with Camel K.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Camel K operator understands two domains: Kubernetes and Camel. By combining knowledge of both areas, it can automate tasks that usually require a human operator.&lt;/p&gt; &lt;p&gt;&lt;b&gt;The really powerful part is that, with Camel K, a Camel route can be built and deployed from source code to a running Camel route on Kubernetes in less than a second.&lt;/b&gt;&lt;/p&gt; &lt;div id="attachment_596987" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-596987" class="wp-image-596987 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2019/05/image2-1024x633.png" alt="Camel-K deployment times" width="640" height="396" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/05/image2-1024x633.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2019/05/image2-300x185.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/05/image2-768x475.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/05/image2.png 1162w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-596987" class="wp-caption-text"&gt;Time to deploy and run a Camel integration(in seconds).&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Forget about making a coffee, or even having a sip, while building and deploying a Camel route with Camel K. As soon as you make changes to your source code and open a browser, the Camel route will be running in Kubernetes. This will have a noticeable impact on the way the developers write Camel code, compile, drink coffee, deploy, and test. Apart from changing development practices and habits, this toolset will significantly reduce the development cycles, which will be noticed by the business stakeholders, too. For a live demonstration, check out this awesome &lt;a href="https://www.youtube.com/watch?v=51x9BewGCYA"&gt;video&lt;/a&gt; from Fuse engineers working on Camel K project.&lt;/p&gt; &lt;h3&gt;Subsecond startups of Camel applications&lt;/h3&gt; &lt;p&gt;A typical enterprise integration landscape is composed of stateless services, stateful services, clustered applications, batch jobs, file transfers, messaging, real-time integrations, and maybe even&lt;a href="https://techcrunch.com/2019/02/05/blockchain-as-integration-evolution/"&gt; blockchain-&lt;/a&gt;based business processes. To that mix, today, we also have to add serverless workloads, which are best suited for event-driven use cases.&lt;/p&gt; &lt;p&gt;Historically, the heavy and slow Java runtime had significant drawbacks compared to Go, Javascript, and other light runtimes in the serverless space. That is one of the main motivations for Oracle to create &lt;a href="https://github.com/oracle/graal/tree/master/substratevm"&gt;GraalVM/Substrate VM&lt;/a&gt;. Substrate VM is a framework that enables ahead-of-time (AOT) compilation of Java applications into native executables that are light and fast. Then a recent effort by Red Hat led to creation of the &lt;a href="https://developers.redhat.com/blog/2019/03/07/quarkus-next-generation-kubernetes-native-java-framework/"&gt;Quarkus project&lt;/a&gt;, which further improves resource consumption, startup, and response times of Java applications mind-blowingly (a term not used lightly here).&lt;/p&gt; &lt;div id="attachment_596997" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-596997" class="size-large wp-image-596997" src="https://developers.redhat.com/blog/wp-content/uploads/2019/05/image1-1024x330.png" alt="Supersonic Subatomic Java with Quarkus" width="640" height="206" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/05/image1-1024x330.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2019/05/image1-300x97.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/05/image1-768x248.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-596997" class="wp-caption-text"&gt;Supersonic subatomic Java with Quarkus.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;As you can see from the metrics above, Quarkus combined with SubstrateVM is not a gradual evolution. It is a mutation and a revolutionary jump that suddenly changes the perspectives on Java‚Äôs footprint and speed in cloud-native workloads. It makes Java friendly for serverless architecture. Considering the huge Java ecosystem of developers and libraries, it even turns Java into the best-suited language for serverless applications. And, it makes Camel, &lt;a href="https://quarkus.io/extensions/"&gt;combined&lt;/a&gt; with Quarkus, the best-placed integration library in this space.&lt;/p&gt; &lt;h2&gt;Summary&lt;/h2&gt; &lt;p&gt;With the explosion of microservices architecture, the number of services has increased tenfold, which gave birth to Kubernetes-enabled architectures. These architectures are highly dynamic in nature and are most powerful with light and fast runtimes that enable instant scale up and higher deployment density.&lt;/p&gt; &lt;p&gt;Camel is the framework to fill the space between disparate systems and services. It offers data consistency guarantees, reliable communication, failover, failure detection and recovery, and so on, in a way that makes developers productive. Now, imagine the same powerful Apache Camel-based integration in the year 2020 that deploys to Kubernetes in 20ms, starts up in 20ms, requires 20MB memory, and consumes 20MB on the disk. That is regardless of whether it runs as a stateless application in a container or as a function on Knative. That means 100x faster deployments to Kubernetes, 100x faster startup time, 10x less resource consumption allowing real-time scale-up, scale-down, and scale to zero.&lt;/p&gt; &lt;p&gt;These are changes that developers will notice during development, users will notice when using the system, and businesses will notice on the infrastructure cost and overall delivery velocity. That is the real cloud-native era we have been waiting for.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F05%2F20%2Fsubsecond-deployment-and-startup-of-apache-camel-applications%2F&amp;#38;linkname=Subsecond%20deployment%20and%20startup%20of%20Apache%20Camel%20applications" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F05%2F20%2Fsubsecond-deployment-and-startup-of-apache-camel-applications%2F&amp;#38;linkname=Subsecond%20deployment%20and%20startup%20of%20Apache%20Camel%20applications" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_google_plus" href="https://www.addtoany.com/add_to/google_plus?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F05%2F20%2Fsubsecond-deployment-and-startup-of-apache-camel-applications%2F&amp;#38;linkname=Subsecond%20deployment%20and%20startup%20of%20Apache%20Camel%20applications" title="Google+" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F05%2F20%2Fsubsecond-deployment-and-startup-of-apache-camel-applications%2F&amp;#38;linkname=Subsecond%20deployment%20and%20startup%20of%20Apache%20Camel%20applications" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F05%2F20%2Fsubsecond-deployment-and-startup-of-apache-camel-applications%2F&amp;#38;linkname=Subsecond%20deployment%20and%20startup%20of%20Apache%20Camel%20applications" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F05%2F20%2Fsubsecond-deployment-and-startup-of-apache-camel-applications%2F&amp;#38;linkname=Subsecond%20deployment%20and%20startup%20of%20Apache%20Camel%20applications" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F05%2F20%2Fsubsecond-deployment-and-startup-of-apache-camel-applications%2F&amp;#38;linkname=Subsecond%20deployment%20and%20startup%20of%20Apache%20Camel%20applications" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F05%2F20%2Fsubsecond-deployment-and-startup-of-apache-camel-applications%2F&amp;#38;linkname=Subsecond%20deployment%20and%20startup%20of%20Apache%20Camel%20applications" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F05%2F20%2Fsubsecond-deployment-and-startup-of-apache-camel-applications%2F&amp;#038;title=Subsecond%20deployment%20and%20startup%20of%20Apache%20Camel%20applications" data-a2a-url="https://developers.redhat.com/blog/2019/05/20/subsecond-deployment-and-startup-of-apache-camel-applications/" data-a2a-title="Subsecond deployment and startup of Apache Camel applications"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/05/20/subsecond-deployment-and-startup-of-apache-camel-applications/"&gt;Subsecond deployment and startup of Apache Camel applications&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/zTr8J0eHMrg" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;The integration space is in constant change. Many open source projects and closed source technologies did not withstand the tests of time and have disappeared from the middleware stacks for good. After a decade, however, Apache Camel is still here and becoming even stronger for the next decade of integration. In this article, I&amp;#8217;ll provide [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/05/20/subsecond-deployment-and-startup-of-apache-camel-applications/"&gt;Subsecond deployment and startup of Apache Camel applications&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer Blog&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2019/05/20/subsecond-deployment-and-startup-of-apache-camel-applications/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">596967</post-id><dc:creator>Bilgin Ibryam</dc:creator><dc:date>2019-05-20T07:00:55Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/05/20/subsecond-deployment-and-startup-of-apache-camel-applications/</feedburner:origLink></entry><entry><title>How To Setup Process Automation Tooling for CodeReady Studio 12</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/fEQswYHlqGk/how-to-setup-process-automation-tooing-for-codeready-studio-12.html" /><category term="AppDev" scheme="searchisko:content:tags" /><category term="Automate" scheme="searchisko:content:tags" /><category term="BPM Suite" scheme="searchisko:content:tags" /><category term="BRMS" scheme="searchisko:content:tags" /><category term="Business Resource Planner" scheme="searchisko:content:tags" /><category term="CodeReadyStudio" scheme="searchisko:content:tags" /><category term="Decision Manager" scheme="searchisko:content:tags" /><category term="feed_group_name_global" scheme="searchisko:content:tags" /><category term="feed_name_ericschabell" scheme="searchisko:content:tags" /><category term="JBoss" scheme="searchisko:content:tags" /><category term="Process Automation Manager" scheme="searchisko:content:tags" /><author><name>Eric D. Schabell</name></author><id>searchisko:content:id:jbossorg_blog-how_to_setup_process_automation_tooling_for_codeready_studio_12</id><updated>2019-05-21T12:06:34Z</updated><published>2019-05-20T05:00:00Z</published><content type="html">&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://2.bp.blogspot.com/-cIzb4fcReRw/XNwFlq25WXI/AAAAAAAAtqM/yPVnqcs3QXAmfg8cEEprq8kHtSkcQ2PAgCLcBGAs/s1600/codereadystudio.png" imageanchor="1" style="clear: left; float: left; margin-bottom: 1em; margin-right: 1em;"&gt;&lt;img alt="codeready studio" border="0" data-original-height="572" data-original-width="894" height="204" src="https://2.bp.blogspot.com/-cIzb4fcReRw/XNwFlq25WXI/AAAAAAAAtqM/yPVnqcs3QXAmfg8cEEprq8kHtSkcQ2PAgCLcBGAs/s320/codereadystudio.png" title="" width="320" /&gt;&lt;/a&gt;&lt;/div&gt;The release of the latest Red Hat developer suite version 12 brings with it a name change from Red Hat JBoss Developer Studio to Red Hat CodeReady Studio.&lt;br /&gt;&lt;br /&gt;The focus here is not on the Red Hat CodeReady Workspaces, a cloud and container development experience, but on the locally installed developers studio.&lt;br /&gt;&lt;br /&gt;The new release brings with it the questions around how to get started with the various Red Hat integration, data, and process automation product tool sets that are not installed out of the box.&lt;br /&gt;&lt;br /&gt;This series of articles continues to showcase how to install each set of tools and explains the products they are supporting. The hope is that an easy getting started experience helps you make informed decisions about the tooling you might want to use on your next development project.&lt;br /&gt;&lt;br /&gt;There are three different software packs that offer tooling for various Red Hat middleware technologies:&lt;br /&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;&lt;a href="https://www.schabell.org/2019/05/how-to-setup-integration-tooling-for-codeready-studio-12.html" target="_blank"&gt;Red Hat Integration Development&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;&lt;b&gt;&lt;a href="http://www.schabell.org/2019/05/how-to-setup-process-automation-tooing-for-codeready-studio-12.html" target="_blank"&gt;Red Hat Process Automation Development&lt;/a&gt;&lt;/b&gt;&lt;/i&gt;&lt;/li&gt;&lt;li&gt;Red Hat Data Virtualization Development&lt;/li&gt;&lt;/ol&gt;This article will outline how to get started with the &lt;i&gt;Red Hat Process Automation&amp;nbsp;&lt;/i&gt;tooling with any of the CodeReady Studio version 12 releases.&lt;br /&gt;&lt;a name='more'&gt;&lt;/a&gt;&lt;br /&gt;&lt;table cellpadding="0" cellspacing="0" class="tr-caption-container" style="float: right; margin-left: 1em; text-align: right;"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style="text-align: center;"&gt;&lt;a href="https://3.bp.blogspot.com/-_Xjk5eintLw/XNwLjnHoA_I/AAAAAAAAtqY/MChzfpJXQFUWXh4R7OkYB1-hsJRWKUxBgCLcBGAs/s1600/Screenshot%2B2019-05-15%2Bat%2B14.49.36.png" imageanchor="1" style="clear: right; margin-bottom: 1em; margin-left: auto; margin-right: auto;"&gt;&lt;img alt="codeready studio" border="0" data-original-height="597" data-original-width="1600" height="119" src="https://3.bp.blogspot.com/-_Xjk5eintLw/XNwLjnHoA_I/AAAAAAAAtqY/MChzfpJXQFUWXh4R7OkYB1-hsJRWKUxBgCLcBGAs/s320/Screenshot%2B2019-05-15%2Bat%2B14.49.36.png" title="" width="320" /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="tr-caption" style="text-align: center;"&gt;Overview of the development add-on tooling.&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h3&gt;Installation&lt;/h3&gt;Red Hat CodeReady Studio can be obtained through the &lt;a href="https://access.redhat.com/jbossnetwork/restricted/listSoftware.html" target="_blank"&gt;Customer Portal&lt;/a&gt;&amp;nbsp;(login required) or via the &lt;a href="https://developers.redhat.com/products/devstudio/download/" target="_blank"&gt;early access downloads on developers.redhat.com&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;After installation, start it up and you will see a welcoming &lt;i&gt;Red Hat Central&lt;/i&gt; tab with at the bottom a tab to look at the available tool sets labeled &lt;i&gt;Software/Update&lt;/i&gt;.&lt;br /&gt;&lt;br /&gt;&lt;div style="text-align: right;"&gt;&lt;/div&gt;&lt;table cellpadding="0" cellspacing="0" class="tr-caption-container" style="float: right; margin-left: 1em; text-align: right;"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style="text-align: center;"&gt;&lt;a href="https://4.bp.blogspot.com/-_BFLCyNWZ6M/XNwT9i4euDI/AAAAAAAAtq4/IzpFn1tDQso-NShRYNbNfsVG3rHlUtUiACLcBGAs/s1600/Screenshot%2B2019-05-15%2Bat%2B14.55.23.png" imageanchor="1" style="clear: right; margin-bottom: 1em; margin-left: auto; margin-right: auto;"&gt;&lt;img alt="codeready studio" border="0" data-original-height="830" data-original-width="1600" height="165" src="https://4.bp.blogspot.com/-_BFLCyNWZ6M/XNwT9i4euDI/AAAAAAAAtq4/IzpFn1tDQso-NShRYNbNfsVG3rHlUtUiACLcBGAs/s320/Screenshot%2B2019-05-15%2Bat%2B14.55.23.png" title="" width="320" /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="tr-caption" style="text-align: center;"&gt;Selecting process automation tooling add-on.&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;You will notice at the time of this writing that there are several options you can install found on the &lt;i&gt;Software/Update&lt;/i&gt; tab. Selecting the &lt;i&gt;Software/Update &lt;/i&gt;tab at the bottom reveals the Red Hat&amp;nbsp;&lt;i&gt;Development&amp;nbsp;&lt;/i&gt;tooling add-ons. Let's select &lt;i&gt;Red Hat Business Process and Rules Development&lt;/i&gt;&amp;nbsp;check box.&lt;br /&gt;&lt;br /&gt;Note that if you previously installed any of these tooling add-ons, your list of options shall not include them all.&lt;br /&gt;&lt;br /&gt;Clicking on the&amp;nbsp;&lt;i&gt;Install/Update&lt;/i&gt;&amp;nbsp;button&amp;nbsp;starts the add-on installation and restarting the CodeReady Studio at the end completes the process.&lt;br /&gt;&lt;br /&gt;If you are interested in what is being installed, it can be examined by examining the pop-up listing of components and versions. Note this will change as the early access progresses towards final releases.&lt;br /&gt;&lt;br /&gt;&lt;div style="text-align: right;"&gt;&lt;/div&gt;&lt;div style="text-align: right;"&gt;&lt;/div&gt;&lt;table cellpadding="0" cellspacing="0" class="tr-caption-container" style="float: right; text-align: right;"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style="text-align: center;"&gt;&lt;a href="https://3.bp.blogspot.com/-GJHGBVDIGQ8/XNwUhNHNFOI/AAAAAAAAtrA/_zhh0Awzz7wDxJnMPFDKg8wXu3lRAKClACLcBGAs/s1600/Screenshot%2B2019-05-15%2Bat%2B15.30.17.png" imageanchor="1" style="clear: right; margin-bottom: 1em; margin-left: auto; margin-right: auto;"&gt;&lt;img alt="codeready studio" border="0" data-original-height="865" data-original-width="1600" height="172" src="https://3.bp.blogspot.com/-GJHGBVDIGQ8/XNwUhNHNFOI/AAAAAAAAtrA/_zhh0Awzz7wDxJnMPFDKg8wXu3lRAKClACLcBGAs/s320/Screenshot%2B2019-05-15%2Bat%2B15.30.17.png" title="" width="320" /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="tr-caption" style="text-align: center;"&gt;Installing components.&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;Stay tuned for more articles in this series that will detail the installation of the remaining development add-on tooling.&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;Other options&lt;/h3&gt;See below for any development tooling needs on previous versions of the studio:&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;&lt;a href="http://www.schabell.org/2019/05/how-to-setup-process-automation-tooing-for-codeready-studio-12.html" target="_blank"&gt;How To Setup Process Automation Tooling for CodeReady Studio 12&lt;/a&gt;&lt;/li&gt;&lt;li&gt;How To Setup Data Virtualization Tooling for CodeReady Studio 12 (coming soon...)&lt;/li&gt;&lt;li&gt;&lt;a href="https://www.schabell.org/2019/05/how-to-setup-integration-tooling-for-codeready-studio-12.html" target="_blank"&gt;How To Setup Integration Tooling for CodeReady Studio 12&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.schabell.org/2017/09/howto-setup-fuse-tooling-for-jbds11.html" target="_blank"&gt;How To Setup Fuse Tooling For JBoss Developer Studio 11&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.schabell.org/2017/09/howto-setup-bpm-and-rules-tooling-for-jbds11.html" target="_blank"&gt;How To Setup BPM and Rules Tooling For JBoss Developer Studio 11&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.schabell.org/2017/09/howto-setup-fuse-tooling-for-jbds11.html" target="_blank"&gt;How To Setup Integration and SOA Tooling For JBoss Developer Studio 11&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.schabell.org/2016/10/howto-setup-fuse-tooling-for-jbds10.html" target="_blank"&gt;How To Setup Fuse Tooling For JBoss Developer Studio 10&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.schabell.org/2016/10/howto-setup-bpm-and-rules-tooling-for-jbds10.html" target="_blank"&gt;How To Setup BPM and Rules Tooling For JBoss Developer Studio 10&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.schabell.org/2016/10/howto-setup-data-virtualization-tooling-for-jbds10.html" target="_blank"&gt;How To Setup Data Virtualization Tooling For JBoss Developer Studio 10&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.schabell.org/2016/11/howto-setup-integration-soa-tooling-for-jbds10.html" target="_blank"&gt;How To Setup Integration and SOA Tooling For JBoss Developer Studio 10&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.schabell.org/2015/10/how-to-setup-fuse-tooling-for-jbds9.html" target="_blank"&gt;How To Setup Fuse Tooling For JBoss Developer Studio 9&amp;nbsp;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.schabell.org/2015/10/how-to-setup-bpm-and-rules-tooling-for-jbds9.html" target="_blank"&gt;How To Setup&amp;nbsp;BPM&amp;nbsp;and Rules Tooling For&amp;nbsp;JBoss&amp;nbsp;Developer Studio 9&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.schabell.org/2015/10/how-to-setup-soa5-tooling-for-jbds919.html" target="_blank"&gt;How To Setup Big Data Tooling For&amp;nbsp;JBoss&amp;nbsp;Developer Studio 9&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.schabell.org/2015/10/how-to-setup-soa5-tooling-for-jbds9.html" target="_blank"&gt;How To Setup SOA 5.x Tooling For JBoss Developer Studio 9&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.schabell.org/2015/10/how-to-setup-integration-and-soa-tooling-for-jbds9.html" target="_blank"&gt;How To Setup Integration &amp;amp; SOA Tooling For JBoss Developer Studio 9&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.schabell.org/2014/11/how-to-setup-bpm-and-rules-tooling-for-jbds8.html" target="_blank"&gt;How To Setup BPM and Rules Tooling For JBoss Developer Studio 8&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.schabell.org/2014/11/how-to-setup-big-data-tooling-for-jbds8.html" target="_blank"&gt;How To Setup Big Data Tooling For JBoss Developer Studio 8&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.schabell.org/2014/11/how-to-setup-integration-and-soa-tooling-for-jbds8.html" target="_blank"&gt;How To Setup Integration &amp;amp; SOA Tooling For JBoss Developer Studio 8&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.schabell.org/2014/11/how-to-setup-soa5-tooling-for-jbds8.html" target="_blank"&gt;How To Setup SOA 5.x Tooling For JBoss Developer Studio 8&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.schabell.org/2013/04/jboss-developer-studio-7-how-to-setup.html" target="_blank"&gt;JBoss Developer Studio 7 - how to setup SOA Tools (BRMS example)&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.schabell.org/2013/04/jboss-developer-studio-6-how-to-setup.html" target="_blank"&gt;JBoss Developer Studio 6 - how to setup SOA Tools (BRMS example)&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.schabell.org/2013/01/jbds-bpmn2-modeler-howto-install.html" target="_blank"&gt;JBoss Developer Studio 5 - how to add Eclipse BPMN2 Modeler as jBPM designer&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.schabell.org/2012/05/jboss-developer-studio-5-how-to-setup.html" target="_blank"&gt;JBoss Developer Studio 5 - how to setup SOA Tools (BRMS example)&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.schabell.org/2011/03/jboss-developer-studio-40-how-to-add_23.html" target="_blank"&gt;JBoss Developer Studio 4.0 - how to add native BPMN2 editor&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.schabell.org/2011/03/jboss-developer-studio-40-how-to-add.html" target="_blank"&gt;&lt;span style="color: blue;"&gt;JBoss Developer Studio 4.0 - how to add native BPMN editor / Enterprise Architect Savara tooling&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.schabell.org/2011/02/jboss-developer-studio-40-how-to-add.html" target="_blank"&gt;&lt;span style="color: blue;"&gt;JBoss Developer Studio 4.0 - how to add tech preview BPEL tooling&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="feedflare"&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=4A5nK7ua8tY:Hfi6tpCYpJo:yIl2AUoC8zA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=yIl2AUoC8zA" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=4A5nK7ua8tY:Hfi6tpCYpJo:63t7Ie-LG7Y"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=63t7Ie-LG7Y" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=4A5nK7ua8tY:Hfi6tpCYpJo:4cEx4HpKnUU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=4A5nK7ua8tY:Hfi6tpCYpJo:4cEx4HpKnUU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=4A5nK7ua8tY:Hfi6tpCYpJo:F7zBnMyn0Lo"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=4A5nK7ua8tY:Hfi6tpCYpJo:F7zBnMyn0Lo" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=4A5nK7ua8tY:Hfi6tpCYpJo:V_sGLiPBpWU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=4A5nK7ua8tY:Hfi6tpCYpJo:V_sGLiPBpWU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=4A5nK7ua8tY:Hfi6tpCYpJo:qj6IDK7rITs"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=qj6IDK7rITs" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=4A5nK7ua8tY:Hfi6tpCYpJo:gIN9vFwOqvQ"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=4A5nK7ua8tY:Hfi6tpCYpJo:gIN9vFwOqvQ" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/schabell/jboss/~4/4A5nK7ua8tY" height="1" width="1" alt=""/&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/fEQswYHlqGk" height="1" width="1" alt=""/&gt;</content><summary>The release of the latest Red Hat developer suite version 12 brings with it a name change from Red Hat JBoss Developer Studio to Red Hat CodeReady Studio. The focus here is not on the Red Hat CodeReady Workspaces, a cloud and container development experience, but on the locally installed developers studio. The new release brings with it the questions around how to get started with the various Red ...</summary><dc:creator>Eric D. Schabell</dc:creator><dc:date>2019-05-20T05:00:00Z</dc:date><feedburner:origLink>http://feedproxy.google.com/~r/schabell/jboss/~3/4A5nK7ua8tY/how-to-setup-process-automation-tooing-for-codeready-studio-12.html</feedburner:origLink></entry><entry><title>Self-service messaging with Red Hat AMQ Online and GitOps</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/PICA9d3Yyfg/" /><category term="CI/CD" /><category term="JBoss A-MQ" /><category term="OpenShift" /><category term="messaging" /><category term="Red Hat AMQ" /><category term="Red Hat OpenShift" /><author><name>Ulf Lilleengen</name></author><id>https://developers.redhat.com/blog/?p=594247</id><updated>2019-05-17T07:00:37Z</updated><published>2019-05-17T07:00:37Z</published><content type="html">&lt;p&gt;This article explores the service model of &lt;a href="https://access.redhat.com/documentation/en-us/red_hat_amq/7.2/html/amq_online_1.1_on_openshift_container_platform_release_notes/index"&gt;Red Hat AMQ Online 1.1&lt;/a&gt; and how it maps to a GitOps workflow for different teams in your organization. For more information on new features in AMQ Online 1.1, see the &lt;a href="https://access.redhat.com/documentation/en-us/red_hat_amq/7.2/html/amq_online_1.1_on_openshift_container_platform_release_notes/index"&gt;release notes.&lt;/a&gt;&lt;/p&gt; &lt;p&gt;AMQ Online is an operator of stateful &lt;b&gt;messaging services&lt;/b&gt; running on &lt;a href="https://developers.redhat.com/openshift/"&gt;Red Hat OpenShift&lt;/a&gt;. AMQ Online is built around the principle that the responsibility of operating the messaging service is separate from the tenants consuming it. The operations team in can manage the messaging infrastructure, while the development teams provision messaging in a self-service manner, just as if they were using a public cloud service.&lt;span id="more-594247"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;GitOps is a way to do Continuous Delivery (CD) where the source code and all configuration of an application is stored in Git. Changes to a production environment involve creating a pull/change request to a Git repository. Once the pull request (PR) has been tested and reviewed, it can be merged. When merged, a CD job is triggered that will apply the current state of the Git repository to the system. There are variants of this where you run A/B testing and so on; the sky is the limit.&lt;/p&gt; &lt;p&gt;The declarative GitOps workflow fits well with the declarative nature of &lt;a href="https://developers.redhat.com/openshift/"&gt;Red Hat OpenShift&lt;/a&gt;. You can store your OpenShift configuration in Git and trigger a process to apply the configuration to an OpenShift cluster. If you store your application code together with the OpenShift configuration, you enable development teams to be in full control of their application deployment. With AMQ Online, both operations and development teams can use GitOps to manage configuration in a declarative manner.&lt;/p&gt; &lt;p&gt;Let&amp;#8217;s assume that you have a team in your organization managing Red Hat AMQ Online on OpenShift and that you have two independent developer teams that both want to use messaging in their applications. The following diagram describes the flow:&lt;/p&gt; &lt;p&gt;&lt;img class=" alignnone size-full wp-image-594277 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/05/enmasse-gitops-678x1024.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/05/enmasse-gitops.png" alt="" width="808" height="1220" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/05/enmasse-gitops.png 808w, https://developers.redhat.com/blog/wp-content/uploads/2019/05/enmasse-gitops-199x300.png 199w, https://developers.redhat.com/blog/wp-content/uploads/2019/05/enmasse-gitops-768x1160.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/05/enmasse-gitops-678x1024.png 678w" sizes="(max-width: 808px) 100vw, 808px" /&gt;&lt;/p&gt; &lt;p&gt;The operations team will manage AMQ Online and commit the desired configuration that they want to support to Git. A CI process then applies the AMQ Online configuration to the cluster.&lt;/p&gt; &lt;p&gt;Independently of the operations team, the development teams commit their application code along with the messaging resource manifests (e.g., &lt;i&gt;AddressSpace&lt;/i&gt;, &lt;i&gt;Address&lt;/i&gt;, and &lt;i&gt;MessagingUser&lt;/i&gt;; we will get back to what these are). A CI process builds the applications and applies the application and messaging resources manifests.&lt;/p&gt; &lt;h2&gt;Operations team&lt;/h2&gt; &lt;p&gt;Managing an AMQ Online installation in Git can be as simple as unpacking the &lt;a href="https://access.redhat.com/node/4098741/423/0/13780061"&gt;release bundle&lt;/a&gt; and committing the parts that is used for a particular installation. Additionally, the desired messaging configuration and available plans can be created. This configuration contains instances of the following resource types:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;code&gt;AuthenticationService&lt;/code&gt; ‚Äî Describes an authentication service instance used to authenticate messaging clients.&lt;/li&gt; &lt;li&gt;&lt;code&gt;AddressSpacePlan&lt;/code&gt; ‚ÄîDescribes the messaging resources available for address spaces using this plan.&lt;/li&gt; &lt;li&gt;&lt;code&gt;AddressPlan&lt;/code&gt; ‚Äî Describes the messaging resources consumed by a particular address using this plan.&lt;/li&gt; &lt;li&gt;&lt;code&gt;StandardInfraConfig&lt;/code&gt; ‚Äî Describes the AMQ Interconnect and AMQ Broker configuration for the standard address space type.&lt;/li&gt; &lt;li&gt;&lt;code&gt;BrokeredInfraConfig&lt;/code&gt; ‚Äî Describes the AMQ Broker configuration for the brokered address space type.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;When created, these resources define the configuration that is available to the messaging tenants. The relationship between all these entities are described in this figure:&lt;/p&gt; &lt;p&gt;&lt;img class=" alignnone size-full wp-image-594427 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/05/amq-online-entities-1024x575.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/05/amq-online-entities.png" alt="" width="1582" height="888" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/05/amq-online-entities.png 1582w, https://developers.redhat.com/blog/wp-content/uploads/2019/05/amq-online-entities-300x168.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/05/amq-online-entities-768x431.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/05/amq-online-entities-1024x575.png 1024w" sizes="(max-width: 1582px) 100vw, 1582px" /&gt;&lt;/p&gt; &lt;p&gt;The green entities are managed by the operations team, whereas the blue entities are created by the developer teams.&lt;/p&gt; &lt;p&gt;For more information about configuring AMQ Online, see &lt;a href="https://access.redhat.com/documentation/en-us/red_hat_amq/7.2/html/installing_and_managing_amq_online_on_openshift_container_platform/configuring-messaging#con-external-authentication-service-api-messaging"&gt;Configuring AMQ Online&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;In this article, we will create a simple configuration to serve the needs of our developer teams.&lt;/p&gt; &lt;h3&gt;Authentication services&lt;/h3&gt; &lt;p&gt;Authentication services are used to authenticate and authorize messaging clients using SASL. AMQ Online supports three types of authentication services supporting different SASL mechanisms:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;code&gt;none&lt;/code&gt; ‚Äî Supports any mechanism but will grant all clients full access.&lt;/li&gt; &lt;li&gt;&lt;code&gt;standard&lt;/code&gt; ‚Äî Supports PLAIN, SCRAMSHA1, SCRAMSHA256 and SCRAMSHA512 mechanisms as well as using OpenShift service account tokens.&lt;/li&gt; &lt;li&gt;&lt;code&gt;external&lt;/code&gt; ‚Äî Implements your own authentication service bridge to your own identity management system. For more information on external authentication services, see &lt;a href="https://access.redhat.com/documentation/en-us/red_hat_amq/7.2/html/installing_and_managing_amq_online_on_openshift_container_platform/configuring-messaging#con-external-authentication-service-api-messaging"&gt;external authentication service API&lt;/a&gt;.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;A &lt;code&gt;standard&lt;/code&gt; authentication service will allow developer teams to apply authentication and authorization policies for their address spaces:&lt;/p&gt; &lt;pre class="brush: plain; title: ; notranslate"&gt; apiVersion: admin.enmasse.io/v1beta1 kind: AuthenticationService metadata: name: standard-authservice spec: type: standard &lt;/pre&gt; &lt;h3&gt;Infrastructure configuration&lt;/h3&gt; &lt;p&gt;Configuration, such as memory, storage, access policies, and other settings that relate to AMQ Interconnect and AMQ Broker, can be specified in the infrastructure configuration.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;StandardInfraConfig&lt;/code&gt; resource type is used to define the configuration for the infrastructure serving the &lt;code&gt;standard&lt;/code&gt; address space types:&lt;/p&gt; &lt;pre class="brush: plain; title: ; notranslate"&gt; apiVersion: admin.enmasse.io/v1beta1 kind: StandardInfraConfig metadata: name: standard spec: router: minReplicas: 2 broker: addressFullPolicy: FAIL resources: memory: 2Gi &lt;/pre&gt; &lt;p&gt;The above configuration will ensure that at least two AMQ Interconnect instances are running, and that brokers will use 2 GB of memory. Default values will be provided for all settings that are not set. Brokers are created on demand once an address of the &lt;code&gt;queue&lt;/code&gt; address type is created by the developer team.&lt;/p&gt; &lt;h4&gt;Plans&lt;/h4&gt; &lt;p&gt;Plans control how much resources that are consumed by developer teams. Requirements such as &amp;#8220;never spin up more than two brokers&amp;#8221; and &amp;#8220;allow max 1000 addresses&amp;#8221; can be implemented using plans. Plans are offered at two levels, for the address spaces, and for the addresses.&lt;/p&gt; &lt;h4&gt;Address space plans&lt;/h4&gt; &lt;p&gt;The address space plan configures the max amount of resources that may be in use by an address space:&lt;/p&gt; &lt;pre class="brush: plain; title: ; notranslate"&gt; apiVersion: admin.enmasse.io/v1beta2 kind: AddressSpacePlan metadata: name: small spec: addressSpaceType: standard infraConfigRef: standard addressPlans: - small-queue resourceLimits: router: 2.0 broker: 2.0 aggregate: 4.0 &lt;/pre&gt; &lt;p&gt;The above plan allows developer team address spaces to consume up to two AMQ Interconnect and two AMQ Broker instances, and only the &lt;code&gt;small-queue&lt;/code&gt; address plan can be used.&lt;/p&gt; &lt;h4&gt;Address plans&lt;/h4&gt; &lt;p&gt;The address plan configures the amount of resource an address uses on the interconnect and broker instances. It is also used by AMQ Online to determine if another broker is needed:&lt;/p&gt; &lt;pre class="brush: plain; title: ; notranslate"&gt; apiVersion: admin.enmasse.io/v1beta2 kind: AddressPlan metadata: name: small-queue spec: addressType: queue resources: router: 0.0001 broker: 0.002 &lt;/pre&gt; &lt;p&gt;With this plan, developers may create up to &lt;code&gt;2.0 / 0.002 = 1000 addresses&lt;/code&gt;. When the 501st address is created, another broker will be created (&lt;code&gt;0.002 * 501 = 1.002 =&amp;#62; 2 brokers&lt;/code&gt;). When maxed out, the system will use two brokers, and 500 addresses will be assigned to each broker.&lt;/p&gt; &lt;h3&gt;Development teams&lt;/h3&gt; &lt;p&gt;The development teams can use the same workflow as the operations team, but they do not need to care about the underlying messaging infrastructure. All the underlying components, such as AMQ Interconnect and AMQ Broker, are all hidden behind the address space abstraction.&lt;/p&gt; &lt;h4&gt;Application&lt;/h4&gt; &lt;p&gt;Now let&amp;#8217;s create a simple messaging application. Writing messaging clients can be a challenging task, as it&amp;#8217;s asynchronous by nature. The &lt;a href="https://github.com/vert-x3/vertx-amqp-client"&gt;vertx-amqp-client&lt;/a&gt; allows you to write simple reactive AMQP 1.0 clients. The following example shows how the application can get all its configuration from the environment:&lt;/p&gt; &lt;pre class="brush: java; title: ; notranslate"&gt; Vertx vertx = Vertx.vertx(); // Use OpenShift service account to authenticate client AmqpClientOptions options = new AmqpClientOptions() .setSsl(true) .setPemKeyCertOptions(new PemKeyCertOptions() .addCertPath(&amp;#34;&amp;#34;/var/run/secrets/kubernetes.io/serviceaccount/ca.crt&amp;#34;)) .setHost(System.getenv(&amp;#34;MESSAGING_HOST&amp;#34;)) .setPort(Integer.parseInt(System.getenv(&amp;#34;MESSAGING_PORT&amp;#34;))) .setUsername(&amp;#34;@@serviceaccount@@&amp;#34;) .setPassword(new String(Files.readAllBytes(Paths.get(&amp;#34;/var/run/secrets/kubernetes.io/serviceaccount/token&amp;#34;)), StandardCharsets.UTF_8)); AmqpClient client = AmqpClient.create(vertx, options); // Initiate the connection client.connect(ar -&amp;#62; { if (ar.succeeded()) { AmqpConnection connection = ar.result(); connection.createSender(&amp;#34;confirmations&amp;#34;, done -&amp;#62; { if (done.succeeded()) { AmqpSender sender = done.result(); connection.createReceiver(&amp;#34;orders&amp;#34;), order -&amp;#62; { // TODO: Process order AmqpMessage confirmation = AmqpMessage.create().withBody(&amp;#34;Confirmed!&amp;#34;).build(); sender.send(confirmation); }, rdone -&amp;#62; { if (rdone.succeeded()) { startPromise.complete(); } else { startPromise.fail(rdone.cause()); } }); } else { startPromise.fail(done.cause()); } }); } else { startPromise.fail(ar.cause()); } }); &lt;/pre&gt; &lt;p&gt;For full example clients, see &lt;a href="https://github.com/EnMasseProject/enmasse-example-clients"&gt;example clients.&lt;/a&gt;&lt;/p&gt; &lt;h4&gt;Messaging resources&lt;/h4&gt; &lt;p&gt;Once your application is written, some configuration for using the messaging resources available on&lt;br /&gt; your cluster is needed.&lt;/p&gt; &lt;h4&gt;Address spaces&lt;/h4&gt; &lt;p&gt;An AMQ Online AddressSpace is a group of addresses that share connection endpoints as well as authentication and authorization policies. When creating an AddressSpace, you can configure how your messaging endpoints are exposed:&lt;/p&gt; &lt;pre class="brush: plain; title: ; notranslate"&gt; apiVersion: enmasse.io/v1beta1 kind: AddressSpace metadata: name: app namespace: team1 spec: type: standard plan: small endpoints: - name: messaging service: messaging cert: provider: openshift exports: - name: messaging-config kind: configmap &lt;/pre&gt; &lt;p&gt;For more information about address spaces, see the &lt;a href="https://access.redhat.com/documentation/en-us/red_hat_amq/7.2/html/using_amq_online_on_openshift_container_platform/managing-address-spaces-messaging#con-address-space-messaging"&gt;address space documentation&lt;/a&gt;.&lt;/p&gt; &lt;h4&gt;Addresses&lt;/h4&gt; &lt;p&gt;Messages are sent and received from an address. An address has a type that determines its semantics and a plan that determines the amount of resources reserved for this address. An address can be defined like this:&lt;/p&gt; &lt;pre class="brush: plain; title: ; notranslate"&gt; apiVersion: enmasse.io/v1beta1 kind: Address metadata: name: app.orders namespace: team1 spec: address: orders type: queue plan: small-queue &lt;/pre&gt; &lt;h4&gt;Authentication and authorization&lt;/h4&gt; &lt;p&gt;To ensure that only trusted applications are able to send and receive messages to your addresses, a messaging user must be created. For applications running on-cluster, you can authenticate clients using an OpenShift service account. A serviceaccount user can be defined like this:&lt;/p&gt; &lt;pre class="brush: plain; title: ; notranslate"&gt; apiVersion: user.enmasse.io/v1beta1 kind: MessagingUser metadata: name: myspace.app namespace: team1 spec: username: system:serviceaccount:team1:default authentication: type: serviceaccount authorization: - operations: [&amp;#34;send&amp;#34;, &amp;#34;recv&amp;#34;] addresses: [&amp;#34;orders&amp;#34;] &lt;/pre&gt; &lt;p&gt;With the above three resources, you have the basics needed for an application to use the messaging service.&lt;/p&gt; &lt;h4&gt;Discovering endpoints&lt;/h4&gt; &lt;p&gt;But how does your application get to know the endpoints for its address space? You may have noticed the &lt;i&gt;exports&lt;/i&gt; field in the address space definition. Exports are a way to instruct AMQ Online that you want a configmap with the hostname, ports, and CA certificate to be created in your namespace. To allow AMQ Online to create this resource, we also need to define a Role and RoleBinding for it:&lt;/p&gt; &lt;pre class="brush: plain; title: ; notranslate"&gt; --- apiVersion: rbac.authorization.k8s.io/v1 kind: Role metadata: name: messaging-config namespace: team1 spec: rules: - apiGroups: [ &amp;#34;&amp;#34; ] resources: [ &amp;#34;configmaps&amp;#34; ] verbs: [ &amp;#34;create&amp;#34; ] - apiGroups: [ &amp;#34;&amp;#34; ] resources: [ &amp;#34;configmaps&amp;#34; ] resourceNames: [ &amp;#34;messaging-config&amp;#34; ] verbs: [ &amp;#34;get&amp;#34;, &amp;#34;update&amp;#34;, &amp;#34;patch&amp;#34; ] --- apiVersion: rbac.authorization.k8s.io/v1 kind: RoleBinding metadata: name: messaging-config namespace: team1 roleRef: apiGroup: rbac.authorization.k8s.io kind: Role name: messaging-config subjects: - kind: ServiceAccount name: address-space-controller namespace: amq-online-infra &lt;/pre&gt; &lt;h3&gt;Wiring configuration into an application&lt;/h3&gt; &lt;p&gt;With messaging configuration in place, we can write the deployment manifest for our application:&lt;/p&gt; &lt;pre class="brush: plain; title: ; notranslate"&gt; apiVersion: apps/v1 kind: Deployment metadata: name: myapp labels: app: myapp spec: replicas: 1 template: metadata: matchLabels: application: demo spec: containers: - name: app image: myapp:latest env: - name: MESSAGING_HOST valueFrom: configMapKeyRef: name: messaging-config key: service.host - name: MESSAGING_PORT valueFrom: configMapKeyRef: name: messaging-config key: service.port.amqps &lt;/pre&gt; &lt;p&gt;As you can see, the values of the configmap is mapped as environment variables to our application.&lt;/p&gt; &lt;h2&gt;Summary&lt;/h2&gt; &lt;p&gt;We have seen how an operations team and a set of development teams can manage messaging as Red Hat OpenShift manifests. This allows your whole organization to follow the GitOps model when deploying your applications using messaging on OpenShift.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F05%2F17%2Fself-service-messaging-with-red-hat-amq-online-and-gitops%2F&amp;#38;linkname=Self-service%20messaging%20with%20Red%20Hat%20AMQ%20Online%20and%20GitOps" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F05%2F17%2Fself-service-messaging-with-red-hat-amq-online-and-gitops%2F&amp;#38;linkname=Self-service%20messaging%20with%20Red%20Hat%20AMQ%20Online%20and%20GitOps" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_google_plus" href="https://www.addtoany.com/add_to/google_plus?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F05%2F17%2Fself-service-messaging-with-red-hat-amq-online-and-gitops%2F&amp;#38;linkname=Self-service%20messaging%20with%20Red%20Hat%20AMQ%20Online%20and%20GitOps" title="Google+" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F05%2F17%2Fself-service-messaging-with-red-hat-amq-online-and-gitops%2F&amp;#38;linkname=Self-service%20messaging%20with%20Red%20Hat%20AMQ%20Online%20and%20GitOps" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F05%2F17%2Fself-service-messaging-with-red-hat-amq-online-and-gitops%2F&amp;#38;linkname=Self-service%20messaging%20with%20Red%20Hat%20AMQ%20Online%20and%20GitOps" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F05%2F17%2Fself-service-messaging-with-red-hat-amq-online-and-gitops%2F&amp;#38;linkname=Self-service%20messaging%20with%20Red%20Hat%20AMQ%20Online%20and%20GitOps" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F05%2F17%2Fself-service-messaging-with-red-hat-amq-online-and-gitops%2F&amp;#38;linkname=Self-service%20messaging%20with%20Red%20Hat%20AMQ%20Online%20and%20GitOps" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F05%2F17%2Fself-service-messaging-with-red-hat-amq-online-and-gitops%2F&amp;#38;linkname=Self-service%20messaging%20with%20Red%20Hat%20AMQ%20Online%20and%20GitOps" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F05%2F17%2Fself-service-messaging-with-red-hat-amq-online-and-gitops%2F&amp;#038;title=Self-service%20messaging%20with%20Red%20Hat%20AMQ%20Online%20and%20GitOps" data-a2a-url="https://developers.redhat.com/blog/2019/05/17/self-service-messaging-with-red-hat-amq-online-and-gitops/" data-a2a-title="Self-service messaging with Red Hat AMQ Online and GitOps"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/05/17/self-service-messaging-with-red-hat-amq-online-and-gitops/"&gt;Self-service messaging with Red Hat AMQ Online and GitOps&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/PICA9d3Yyfg" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;This article explores the service model of Red Hat AMQ Online 1.1 and how it maps to a GitOps workflow for different teams in your organization. For more information on new features in AMQ Online 1.1, see the release notes. AMQ Online is an operator of stateful messaging services running on Red Hat OpenShift. AMQ [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/05/17/self-service-messaging-with-red-hat-amq-online-and-gitops/"&gt;Self-service messaging with Red Hat AMQ Online and GitOps&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer Blog&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2019/05/17/self-service-messaging-with-red-hat-amq-online-and-gitops/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">594247</post-id><dc:creator>Ulf Lilleengen</dc:creator><dc:date>2019-05-17T07:00:37Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/05/17/self-service-messaging-with-red-hat-amq-online-and-gitops/</feedburner:origLink></entry><entry><title>JBoss Weekly Editorial 16 May 2019</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/qHuh49lbSP0/jboss-weekly-editorial-16-may-2019" /><category term="blog" scheme="searchisko:content:tags" /><category term="feed_group_name_global" scheme="searchisko:content:tags" /><category term="feed_name_weeklyeditorial" scheme="searchisko:content:tags" /><category term="jbossws" scheme="searchisko:content:tags" /><category term="optaplanner" scheme="searchisko:content:tags" /><category term="weekly_editorial" scheme="searchisko:content:tags" /><author><name>Jason Porter</name></author><id>searchisko:content:id:jbossorg_blog-jboss_weekly_editorial_16_may_2019</id><updated>2019-05-16T23:20:58Z</updated><published>2019-05-16T23:20:00Z</published><content type="html">&lt;!-- [DocumentBodyStart:e0e921d4-de06-425a-ba36-a5f9c2f0f029] --&gt;&lt;div class="jive-rendered-content"&gt;&lt;div&gt;&lt;div&gt;&lt;div class="sectionbody"&gt;&lt;div class="paragraph"&gt;&lt;p&gt;Welcome to a post-Red Hat Summit JBoss Weekly Editorial! We just came back from Red Hat Summit 2019 in Boston. What a great week with some amazing news! Of course two big announcements that came out of Summit this year are Red Hat Enterprise Linux 8 and OpenShift 4. Great things coming out of Red Hat these days!&lt;/p&gt;&lt;/div&gt;&lt;div class="paragraph"&gt;&lt;p&gt;All of that being said, there have been some other interesting happenings this week since Summit. There&amp;#8217;s only one release, mostly due to Summit, but we will go over blogs and some great things from the community. That release was JBossWS, see the &lt;a class="jive-link-external-small" href="http://jbossws.blogspot.com/2019/05/jbossws-530final-is-out.html" rel="nofollow"&gt;release post&lt;/a&gt; for more information.&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="sect1"&gt;&lt;h2&gt;Blogs&lt;/h2&gt;&lt;div class="sectionbody"&gt;&lt;div class="paragraph"&gt;&lt;p&gt;A number of blogs came out over the past couple of weeks. Check out the blogs featured below!&lt;/p&gt;&lt;/div&gt;&lt;div class="sect2"&gt;&lt;h3&gt;&lt;/h3&gt;&lt;h3&gt;OptaPlanner&lt;/h3&gt;&lt;div class="paragraph"&gt;&lt;p&gt;If you weren&amp;#8217;t at Summit, or missed the Thursday morning general session, you can see the recording below. &lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;&lt;a class="jive-link-external-small" href="https://www.youtube.com/watch?v=FUu4kMc0PL8" rel="nofollow"&gt;Thursday morning general session - May 9 - Red Hat Summit 2019 - YouTube&lt;/a&gt; &lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;/div&gt;&lt;div class="paragraph"&gt;&lt;p&gt;A large part of the demo was handled with OptaPlanner. Geoffrey De Smet has done a series of blog posts detailing its use in the demo:&lt;/p&gt;&lt;/div&gt;&lt;div class="ulist"&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;&lt;a class="jive-link-external-small" href="https://www.optaplanner.org/blog/2019/05/09/RHSummit2019Part1.html" rel="nofollow"&gt;https://www.optaplanner.org/blog/2019/05/09/RHSummit2019Part1.html&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;a class="jive-link-external-small" href="https://www.optaplanner.org/blog/2019/05/09/RHSummit2019Part2.html" rel="nofollow"&gt;https://www.optaplanner.org/blog/2019/05/09/RHSummit2019Part2.html&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;a class="jive-link-external-small" href="https://www.optaplanner.org/blog/2019/05/09/RHSummit2019Part3.html" rel="nofollow"&gt;https://www.optaplanner.org/blog/2019/05/09/RHSummit2019Part3.html&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div class="paragraph"&gt;&lt;p&gt;Geoffrey has some great breakdowns about how OptaPlanner was used, things they learned, and some code as well!&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="sect2"&gt;&lt;h3&gt;&lt;/h3&gt;&lt;h3&gt;Eric Schabell&lt;/h3&gt;&lt;div class="paragraph"&gt;&lt;p&gt;Eric Schabell gave a talk at Summit titled "3 Pitfalls Everyone Should Avoid with Microservices." In his &lt;a class="jive-link-external-small" href="http://www.schabell.org/2019/05/redhat-summit-2019-3-pitfalls-microservices.html" rel="nofollow"&gt;blog&lt;/a&gt; he details the talk a bit more and gives gives you a link to see the slides.&lt;/p&gt;&lt;/div&gt;&lt;div class="paragraph"&gt;&lt;p&gt;Eric also has a blog post about &lt;a class="jive-link-external-small" href="http://www.schabell.org/2019/05/how-to-setup-integration-tooling-for-codeready-studio-12.html" rel="nofollow"&gt;setting up integration tooling for CodeReady Studio 12&lt;/a&gt;. This will be an ongoing series from Eric. Look for more posts details more information about CodeReady Studio 12.&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="sect2"&gt;&lt;h3&gt;&lt;/h3&gt;&lt;h3&gt;Red Hat Developer Blog&lt;/h3&gt;&lt;div class="paragraph"&gt;&lt;p&gt;A number of blogs came out on the Developer Blog. Check them out below.&lt;/p&gt;&lt;/div&gt;&lt;div class="ulist"&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;&lt;a class="jive-link-external-small" href="https://developers.redhat.com/blog/2019/05/14/bringing-iot-to-red-hat-amq-online/" rel="nofollow"&gt;https://developers.redhat.com/blog/2019/05/14/bringing-iot-to-red-hat-amq-online/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;a class="jive-link-external-small" href="https://developers.redhat.com/blog/2019/05/14/use-the-kubernetes-python-client-from-your-running-red-hat-openshift-pods/" rel="nofollow"&gt;https://developers.redhat.com/blog/2019/05/14/use-the-kubernetes-python-client-from-your-running-red-hat-openshift-pods/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;a class="jive-link-external-small" href="https://developers.redhat.com/blog/2019/05/13/building-and-understanding-reactive-microservices-using-eclipse-vert-x-and-distributed-tracing/" rel="nofollow"&gt;https://developers.redhat.com/blog/2019/05/13/building-and-understanding-reactive-microservices-using-eclipse-vert-x-and-distributed-tracing/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;a class="jive-link-external-small" href="https://developers.redhat.com/blog/2019/04/12/migrating-java-applications-to-quarkus-lessons-learned/" rel="nofollow"&gt;https://developers.redhat.com/blog/2019/04/12/migrating-java-applications-to-quarkus-lessons-learned/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;a class="jive-link-external-small" href="https://developers.redhat.com/blog/2019/05/13/migrating-java-applications-to-quarkus-part-2-before-and-after/" rel="nofollow"&gt;https://developers.redhat.com/blog/2019/05/13/migrating-java-applications-to-quarkus-part-2-before-and-after/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;a class="jive-link-external-small" href="https://developers.redhat.com/blog/2019/05/10/red-hat-openshift-4-aws-windows-and-a-video/" rel="nofollow"&gt;https://developers.redhat.com/blog/2019/05/10/red-hat-openshift-4-aws-windows-and-a-video/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;a class="jive-link-external-small" href="https://developers.redhat.com/blog/2019/05/09/create-your-first-quarkus-project-with-eclipse-ide-red-hat-codeready-studio/" rel="nofollow"&gt;https://developers.redhat.com/blog/2019/05/09/create-your-first-quarkus-project-with-eclipse-ide-red-hat-codeready-studio/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div class="paragraph"&gt;&lt;p&gt;Some great blog articles over the past couple of weeks, thanks everyone! It has been a great couple of weeks and some amazing content both from Red Hat and the larger community!&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;!-- [DocumentBodyEnd:e0e921d4-de06-425a-ba36-a5f9c2f0f029] --&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/qHuh49lbSP0" height="1" width="1" alt=""/&gt;</content><summary>Welcome to a post-Red Hat Summit JBoss Weekly Editorial! We just came back from Red Hat Summit 2019 in Boston. What a great week with some amazing news! Of course two big announcements that came out of Summit this year are Red Hat Enterprise Linux 8 and OpenShift 4. Great things coming out of Red Hat these days! All of that being said, there have been some other interesting happenings this week si...</summary><dc:creator>Jason Porter</dc:creator><dc:date>2019-05-16T23:20:00Z</dc:date><feedburner:origLink>https://developer.jboss.org/blogs/weekly-editorial/2019/05/16/jboss-weekly-editorial-16-may-2019</feedburner:origLink></entry><entry><title>Modular Perl in Red Hat Enterprise Linux¬†8</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/0PbBJUj2ZEw/" /><category term="Linux" /><category term="Perl" /><category term="RHEL8" /><category term="perl" /><category term="Red Hat Enterprise Linux" /><category term="rpm package" /><category term="Yum" /><author><name>Petr Pisar</name></author><id>https://developers.redhat.com/blog/?p=596027</id><updated>2019-05-16T07:00:52Z</updated><published>2019-05-16T07:00:52Z</published><content type="html">&lt;p&gt;&lt;a href="https://www.redhat.com/en/enterprise-linux-8"&gt;Red Hat Enterprise Linux 8&lt;/a&gt; comes with &lt;a href="https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html-single/installing_managing_and_removing_user_space_components/index#introduction-to-modules_using-appstream"&gt;modules as a packaging concept&lt;/a&gt; that allows system administrators to select the desired software version from multiple packaged versions. This article will show you how to manage Perl as a module.&lt;span id="more-596027"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;Installing from a default stream&lt;/h2&gt; &lt;p&gt;Let&amp;#8217;s install Perl:&lt;/p&gt; &lt;pre&gt;# yum --allowerasing install perl Last metadata expiration check: 1:37:36 ago on Tue 07 May 2019 04:18:01 PM CEST. Dependencies resolved. ========================================================================================== Package Arch Version Repository Size ========================================================================================== Installing: perl x86_64 4:5.26.3-416.el8 rhel-8.0.z-appstream 72 k Installing dependencies: [‚Ä¶] Transaction Summary ========================================================================================== Install 147 Packages Total download size: 21 M Installed size: 59 M Is this ok [y/N]: y [‚Ä¶] perl-threads-shared-1.58-2.el8.x86_64 Complete!&lt;/pre&gt; &lt;p&gt;Next, check which Perl you have:&lt;/p&gt; &lt;pre&gt;$ perl -V:version version='5.26.3';&lt;/pre&gt; &lt;p&gt;You have 5.26.3 Perl version. This is the default version supported for the next 10 years and, if you are fine with it, you don&amp;#8217;t have to know anything about modules. But what if you want to try a different version?&lt;/p&gt; &lt;h2&gt;Discovering streams&lt;/h2&gt; &lt;p&gt;Let&amp;#8217;s find out what Perl modules are available using the &lt;code&gt;yum module list&lt;/code&gt; command:&lt;/p&gt; &lt;pre&gt;# yum module list Last metadata expiration check: 1:45:10 ago on Tue 07 May 2019 04:18:01 PM CEST. [‚Ä¶] Name Stream Profiles Summary [‚Ä¶] parfait 0.5 common Parfait Module perl 5.24 common [d], Practical Extraction and Report Languag minimal e perl 5.26 [d] common [d], Practical Extraction and Report Languag minimal e perl-App-cpanminus 1.7044 [d] common [d] Get, unpack, build and install CPAN mod ules perl-DBD-MySQL 4.046 [d] common [d] A MySQL interface for Perl perl-DBD-Pg 3.7 [d] common [d] A PostgreSQL interface for Perl perl-DBD-SQLite 1.58 [d] common [d] SQLite DBI driver perl-DBI 1.641 [d] common [d] A database access API for Perl perl-FCGI 0.78 [d] common [d] FastCGI Perl bindings perl-YAML 1.24 [d] common [d] Perl parser for YAML php 7.2 [d] common [d], PHP scripting language devel, minim al [‚Ä¶] &lt;/pre&gt; &lt;p&gt;Here you can see a Perl module is available in versions 5.24 and 5.26. Those are called &lt;em&gt;streams&lt;/em&gt; in the modularity world, and they denote an independent variant, usually a different version, of the same software stack. The &lt;em&gt;[d]&lt;/em&gt; flag marks a default stream. That means if you do not explicitly enable a different stream, the default one will be used. That explains why yum installed Perl 5.26.3 and not some of the 5.24 micro versions.&lt;/p&gt; &lt;p&gt;Now suppose you have an old application that you are migrating from Red Hat Enterprise Linux 7, which was running in the &lt;em&gt;rh-perl524&lt;/em&gt; &lt;a href="https://www.redhat.com/en/resources/red-hat-software-collections"&gt;software collection&lt;/a&gt; environment, and you want to give it a try on Red Hat Enterprise Linux 8. Let&amp;#8217;s try Perl 5.24 on Red Hat Enterprise Linux 8.&lt;/p&gt; &lt;h2&gt;Enabling a Stream&lt;/h2&gt; &lt;p&gt;First, switch the Perl module to the 5.24 stream:&lt;/p&gt; &lt;pre&gt;# yum module enable perl:5.24 Last metadata expiration check: 2:03:16 ago on Tue 07 May 2019 04:18:01 PM CEST. Problems in request: Modular dependency problems with Defaults: Problem 1: conflicting requests - module freeradius:3.0:8000020190425181943:75ec4169-0.x86_64 requires module(perl:5.26), but none of the providers can be installed - module perl:5.26:820181219174508:9edba152-0.x86_64 conflicts with module(perl:5.24) provided by perl:5.24:820190207164249:ee766497-0.x86_64 - module perl:5.24:820190207164249:ee766497-0.x86_64 conflicts with module(perl:5.26) provided by perl:5.26:820181219174508:9edba152-0.x86_64 Problem 2: conflicting requests - module freeradius:3.0:820190131191847:fbe42456-0.x86_64 requires module(perl:5.26), but none of the providers can be installed - module perl:5.26:820181219174508:9edba152-0.x86_64 conflicts with module(perl:5.24) provided by perl:5.24:820190207164249:ee766497-0.x86_64 - module perl:5.24:820190207164249:ee766497-0.x86_64 conflicts with module(perl:5.26) provided by perl:5.26:820181219174508:9edba152-0.x86_64 Dependencies resolved. ========================================================================================== Package Arch Version Repository Size ========================================================================================== Enabling module streams: perl 5.24 Transaction Summary ========================================================================================== Is this ok [y/N]: y Complete! Switching module streams does not alter installed packages (see 'module enable' in dnf(8) for details)&lt;/pre&gt; &lt;p&gt;Here you can see a warning that the &lt;em&gt;freeradius:3.0&lt;/em&gt; stream is not compatible with &lt;em&gt;perl:5.24&lt;/em&gt;. That&amp;#8217;s because FreeRADIUS was built for Perl 5.26 only. Not all modules are compatible with all other modules.&lt;/p&gt; &lt;p&gt;Next, you can see a confirmation for enabling the Perl 5.24 stream. And, finally, there is another warning about installed packages. The last warning means that the system still can have installed RPM packages from the 5.26 stream, and you need to explicitly sort it out.&lt;/p&gt; &lt;p&gt;Changing modules and changing packages are two separate phases. You can fix it by synchronizing a distribution content like this:&lt;/p&gt; &lt;pre&gt;# yum --allowerasing distrosync Last metadata expiration check: 0:00:56 ago on Tue 07 May 2019 06:33:36 PM CEST. Modular dependency problems: Problem 1: module freeradius:3.0:8000020190425181943:75ec4169-0.x86_64 requires module(perl:5.26), but none of the providers can be installed - module perl:5.26:820181219174508:9edba152-0.x86_64 conflicts with module(perl:5.24) provided by perl:5.24:820190207164249:ee766497-0.x86_64 - module perl:5.24:820190207164249:ee766497-0.x86_64 conflicts with module(perl:5.26) provided by perl:5.26:820181219174508:9edba152-0.x86_64 - conflicting requests Problem 2: module freeradius:3.0:820190131191847:fbe42456-0.x86_64 requires module(perl:5.26), but none of the providers can be installed - module perl:5.26:820181219174508:9edba152-0.x86_64 conflicts with module(perl:5.24) provided by perl:5.24:820190207164249:ee766497-0.x86_64 - module perl:5.24:820190207164249:ee766497-0.x86_64 conflicts with module(perl:5.26) provided by perl:5.26:820181219174508:9edba152-0.x86_64 - conflicting requests Dependencies resolved. ========================================================================================== Package Arch Version Repository Size ========================================================================================== [‚Ä¶] Downgrading: perl x86_64 4:5.24.4-403.module+el8+2770+c759b41a rhel-8.0.z-appstream 6.1 M [‚Ä¶] Transaction Summary ========================================================================================== Upgrade 69 Packages Downgrade 66 Packages Total download size: 20 M Is this ok [y/N]: y [‚Ä¶] Complete!&lt;/pre&gt; &lt;p&gt;And try the &lt;code&gt;perl&lt;/code&gt; command again:&lt;/p&gt; &lt;pre&gt;$ perl -V:version version='5.24.4';&lt;/pre&gt; &lt;p&gt;Great! It works. We switched to a different Perl version, and the different Perl is still invoked with the &lt;code&gt;perl&lt;/code&gt; command and is installed to a standard path (&lt;em&gt;/usr/bin/perl&lt;/em&gt;). No &lt;code&gt;scl enable&lt;/code&gt; incantation is needed, in contrast to the software collections.&lt;/p&gt; &lt;p&gt;You could notice the repeated warning about FreeRADIUS. A future YUM update is going to clean up the unnecessary warning. Despite that, I can show you that other Perl-ish modules are compatible with any Perl stream.&lt;/p&gt; &lt;h2&gt;Dependent modules&lt;/h2&gt; &lt;p&gt;Let&amp;#8217;s say the old application mentioned before is using &lt;em&gt;DBD::SQLite&lt;/em&gt; Perl module. (This nomenclature is a little ambiguous: Red Hat Enterprise Linux has modules; Perl has modules. If I want to emphasize the difference, I will say the Modularity modules or the CPAN modules.) So, let&amp;#8217;s install CPAN&amp;#8217;s DBD::SQLite module. Yum can search in a packaged CPAN module, so give a try:&lt;/p&gt; &lt;pre&gt;# yum --allowerasing install 'perl(DBD::SQLite)' [‚Ä¶] Dependencies resolved. ========================================================================================== Package Arch Version Repository Size ========================================================================================== Installing: perl-DBD-SQLite x86_64 1.58-1.module+el8+2519+e351b2a7 rhel-8.0.z-appstream 186 k Installing dependencies: perl-DBI x86_64 1.641-2.module+el8+2701+78cee6b5 rhel-8.0.z-appstream 739 k Enabling module streams: perl-DBD-SQLite 1.58 perl-DBI 1.641 Transaction Summary ========================================================================================== Install 2 Packages Total download size: 924 k Installed size: 2.3 M Is this ok [y/N]: y [‚Ä¶] Installed: perl-DBD-SQLite-1.58-1.module+el8+2519+e351b2a7.x86_64 perl-DBI-1.641-2.module+el8+2701+78cee6b5.x86_64 Complete!&lt;/pre&gt; &lt;p&gt;Here you can see DBD::SQLite CPAN module was found in the &lt;em&gt;perl-DBD-SQLite&lt;/em&gt; RPM package that&amp;#8217;s part of &lt;em&gt;perl-DBD-SQLite:1.58&lt;/em&gt; module, and apparently it requires some dependencies from the &lt;em&gt;perl-DBI:1.641&lt;/em&gt; module, too. Thus, yum asked for enabling the streams and installing the packages.&lt;/p&gt; &lt;p&gt;Before playing with DBD::SQLite under Perl 5.24, take a look at the listing of the Modularity modules and compare it with what you saw the first time:&lt;/p&gt; &lt;pre&gt;# yum module list [‚Ä¶] parfait 0.5 common Parfait Module perl 5.24 [e] common [d], Practical Extraction and Report Languag minimal e perl 5.26 [d] common [d], Practical Extraction and Report Languag minimal e perl-App-cpanminus 1.7044 [d] common [d] Get, unpack, build and install CPAN mod ules perl-DBD-MySQL 4.046 [d] common [d] A MySQL interface for Perl perl-DBD-Pg 3.7 [d] common [d] A PostgreSQL interface for Perl perl-DBD-SQLite 1.58 [d][e] common [d] SQLite DBI driver perl-DBI 1.641 [d][e] common [d] A database access API for Perl perl-FCGI 0.78 [d] common [d] FastCGI Perl bindings perl-YAML 1.24 [d] common [d] Perl parser for YAML php 7.2 [d] common [d], PHP scripting language devel, minim al [‚Ä¶] &lt;/pre&gt; &lt;p&gt;Notice that perl:5.24 is enabled (&lt;em&gt;[e]&lt;/em&gt;) and thus takes precedence over perl:5.26, which would otherwise be a default one (&lt;em&gt;[d]&lt;/em&gt;). Other enabled Modularity modules are perl-DBD-SQLite:1.58 and perl-DBI:1.641. Those are were enabled when you installed DBD::SQLite. These two modules have no other streams.&lt;/p&gt; &lt;p&gt;In general, any module can have multiple streams. At most, one stream of a module can be the default one. And, at most, one stream of a module can be enabled. An enabled stream takes precedence over a default one. If there is no enabled or a default stream, content of the module is unavailable.&lt;/p&gt; &lt;p&gt;If, for some reason, you need to disable a stream, even a default one, you do that with &lt;code&gt;yum module disable &lt;var&gt;MODULE:STREAM&lt;/var&gt;&lt;/code&gt; command.&lt;/p&gt; &lt;p&gt;Enough theory, back to some productive work. You are ready to test the DBD::SQLite CPAN module now. Let&amp;#8217;s create a &lt;em&gt;test&lt;/em&gt; database, a &lt;em&gt;foo&lt;/em&gt; table inside with one textual column called &lt;em&gt;bar&lt;/em&gt;, and let&amp;#8217;s store a row with &lt;em&gt;Hello&lt;/em&gt; text there:&lt;/p&gt; &lt;pre&gt;$ perl -MDBI -e '$dbh=DBI-&amp;#62;connect(q{dbi:SQLite:dbname=test}); $dbh-&amp;#62;do(q{CREATE TABLE foo (bar text)}); $sth=$dbh-&amp;#62;prepare(q{INSERT INTO foo(bar) VALUES(?)}); $sth-&amp;#62;execute(q{Hello})'&lt;/pre&gt; &lt;p&gt;Next, verify the &lt;em&gt;Hello&lt;/em&gt; string was indeed stored by querying the database:&lt;/p&gt; &lt;pre&gt;$ perl -MDBI -e '$dbh=DBI-&amp;#62;connect(q{dbi:SQLite:dbname=test}); print $dbh-&amp;#62;selectrow_array(q{SELECT bar FROM foo}), qq{\n}' Hello&lt;/pre&gt; &lt;p&gt;It seems DBD::SQLite works.&lt;/p&gt; &lt;h2&gt;Non-modular packages may not work with non-default streams&lt;/h2&gt; &lt;p&gt;So far, everything is great and working. Now I will show what happens if you try to install an RPM package that has not been modularized and is thus compatible only with the default Perl, perl:5.26:&lt;/p&gt; &lt;pre&gt;# yum --allowerasing install 'perl(LWP)' [‚Ä¶] Error: Problem: package perl-libwww-perl-6.34-1.el8.noarch requires perl(:MODULE_COMPAT_5.26.2), but none of the providers can be installed - cannot install the best candidate for the job - package perl-libs-4:5.26.3-416.el8.i686 is excluded - package perl-libs-4:5.26.3-416.el8.x86_64 is excluded (try to add '--skip-broken' to skip uninstallable packages or '--nobest' to use not only best candidate packages)&lt;/pre&gt; &lt;p&gt;Yum will report an error about &lt;em&gt;perl-libwww-perl&lt;/em&gt; RPM package being incompatible. The &lt;em&gt;LWP&lt;/em&gt; CPAN module that is packaged as perl-libwww-perl is built only for Perl 5.26, and therefore RPM dependencies cannot be satisfied. When a perl:5.24 stream is enabled, the packages from perl:5.26 stream are masked and become unavailable. However, this masking does not apply to non-modular packages, like perl-libwww-perl. There are plenty of packages that were not modularized yet. If you need some of them to be available and compatible with a non-default stream (e.g., not only with perl:5.26 but also with perl:5.24) do not hesitate to contact &lt;a href="https://access.redhat.com/support"&gt;Red Hat support team&lt;/a&gt; with your request.&lt;/p&gt; &lt;h2&gt;Resetting a module&lt;/h2&gt; &lt;p&gt;Let&amp;#8217;s say you tested your old application and now you want to find out if it works with the new Perl 5.26.&lt;/p&gt; &lt;p&gt;To do that, you need to switch back to the perl:5.26 stream. Unfortunately, switching from an enabled stream back to a default or to a yet another non-default stream is not straightforward. You&amp;#8217;ll need to perform a module reset:&lt;/p&gt; &lt;pre&gt;# yum module reset perl [‚Ä¶] Dependencies resolved. ========================================================================================== Package Arch Version Repository Size ========================================================================================== Resetting module streams: perl 5.24 Transaction Summary ========================================================================================== Is this ok [y/N]: y Complete!&lt;/pre&gt; &lt;p&gt;Well, that did not hurt. Now you can synchronize the distribution again to replace the 5.24 RPM packages with 5.26 ones:&lt;/p&gt; &lt;pre&gt;# yum --allowerasing distrosync [‚Ä¶] Transaction Summary ========================================================================================== Upgrade 65 Packages Downgrade 71 Packages Total download size: 22 M Is this ok [y/N]: y [‚Ä¶]&lt;/pre&gt; &lt;p&gt;After that, you can check the Perl version:&lt;/p&gt; &lt;pre&gt;$ perl -V:version version='5.26.3';&lt;/pre&gt; &lt;p&gt;And, check the enabled modules:&lt;/p&gt; &lt;pre&gt;# yum module list [‚Ä¶] parfait 0.5 common Parfait Module perl 5.24 common [d], Practical Extraction and Report Languag minimal e perl 5.26 [d] common [d], Practical Extraction and Report Languag minimal e perl-App-cpanminus 1.7044 [d] common [d] Get, unpack, build and install CPAN mod ules perl-DBD-MySQL 4.046 [d] common [d] A MySQL interface for Perl perl-DBD-Pg 3.7 [d] common [d] A PostgreSQL interface for Perl perl-DBD-SQLite 1.58 [d][e] common [d] SQLite DBI driver perl-DBI 1.641 [d][e] common [d] A database access API for Perl perl-FCGI 0.78 [d] common [d] FastCGI Perl bindings perl-YAML 1.24 [d] common [d] Perl parser for YAML php 7.2 [d] common [d], PHP scripting language devel, minim al [‚Ä¶] &lt;/pre&gt; &lt;p&gt;As you can see, we are back at the square one. The perl:5.24 stream is not enabled, and perl:5.26 is the default and therefore preferred. Only perl-DBD-SQLite:1.58 and perl-DBI:1.641 streams remained enabled. It does not matter much because those are the only streams. Nonetheless, you can reset them back using &lt;code&gt;yum module reset perl-DBI perl-DBD-SQLite&lt;/code&gt; if you like.&lt;/p&gt; &lt;h2&gt;Multi-context streams&lt;/h2&gt; &lt;p&gt;What happened with the DBD::SQLite? It&amp;#8217;s still there and working:&lt;/p&gt; &lt;pre&gt;$ perl -MDBI -e '$dbh=DBI-&amp;#62;connect(q{dbi:SQLite:dbname=test}); print $dbh-&amp;#62;selectrow_array(q{SELECT bar FROM foo}), qq{\n}' Hello&lt;/pre&gt; &lt;p&gt;That is possible because the perl-DBD-SQLite module is built for both 5.24 and 5.26 Perls. We call these modules &lt;em&gt;multi-contextual&lt;/em&gt;. That&amp;#8217;s the case for perl-DBD-SQLite or perl-DBI, but not the case for FreeRADIUS, which explains the warning you saw earlier. If you want to see these low-level details, such which contexts are available, which dependencies are required, or which packages are contained in a module, you can use the &lt;code&gt;yum module info &lt;var&gt;MODULE:STREAM&lt;/var&gt;&lt;/code&gt; command.&lt;/p&gt; &lt;h2&gt;Afterword&lt;/h2&gt; &lt;p&gt;I hope this tutorial shed some light on modules‚Äîthe fresh feature of Red Hat Enterprise Linux 8 that enables us to provide you with multiple versions of software on top of one Linux platform. If you need more details, please read &lt;a href="https://developers.redhat.com/rhel8/"&gt;documentation accompanying the product&lt;/a&gt; (namely, user-space component management document and &lt;a href="http://man7.org/linux/man-pages/man8/yum.8.html"&gt;yum(8) manual page&lt;/a&gt;) or ask the support team for help.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F05%2F16%2Fmodular-perl-in-red-hat-enterprise-linux-8%2F&amp;#38;linkname=Modular%20Perl%20in%20Red%20Hat%20Enterprise%20Linux%C2%A08" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F05%2F16%2Fmodular-perl-in-red-hat-enterprise-linux-8%2F&amp;#38;linkname=Modular%20Perl%20in%20Red%20Hat%20Enterprise%20Linux%C2%A08" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_google_plus" href="https://www.addtoany.com/add_to/google_plus?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F05%2F16%2Fmodular-perl-in-red-hat-enterprise-linux-8%2F&amp;#38;linkname=Modular%20Perl%20in%20Red%20Hat%20Enterprise%20Linux%C2%A08" title="Google+" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F05%2F16%2Fmodular-perl-in-red-hat-enterprise-linux-8%2F&amp;#38;linkname=Modular%20Perl%20in%20Red%20Hat%20Enterprise%20Linux%C2%A08" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F05%2F16%2Fmodular-perl-in-red-hat-enterprise-linux-8%2F&amp;#38;linkname=Modular%20Perl%20in%20Red%20Hat%20Enterprise%20Linux%C2%A08" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F05%2F16%2Fmodular-perl-in-red-hat-enterprise-linux-8%2F&amp;#38;linkname=Modular%20Perl%20in%20Red%20Hat%20Enterprise%20Linux%C2%A08" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F05%2F16%2Fmodular-perl-in-red-hat-enterprise-linux-8%2F&amp;#38;linkname=Modular%20Perl%20in%20Red%20Hat%20Enterprise%20Linux%C2%A08" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F05%2F16%2Fmodular-perl-in-red-hat-enterprise-linux-8%2F&amp;#38;linkname=Modular%20Perl%20in%20Red%20Hat%20Enterprise%20Linux%C2%A08" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F05%2F16%2Fmodular-perl-in-red-hat-enterprise-linux-8%2F&amp;#038;title=Modular%20Perl%20in%20Red%20Hat%20Enterprise%20Linux%C2%A08" data-a2a-url="https://developers.redhat.com/blog/2019/05/16/modular-perl-in-red-hat-enterprise-linux-8/" data-a2a-title="Modular Perl in Red Hat Enterprise Linux¬†8"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/05/16/modular-perl-in-red-hat-enterprise-linux-8/"&gt;Modular Perl in Red Hat Enterprise Linux¬†8&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/0PbBJUj2ZEw" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;Red Hat Enterprise Linux 8 comes with modules as a packaging concept that allows system administrators to select the desired software version from multiple packaged versions. This article will show you how to manage Perl as a module. Installing from a default stream Let&amp;#8217;s install Perl: # yum --allowerasing install perl Last metadata expiration check: [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/05/16/modular-perl-in-red-hat-enterprise-linux-8/"&gt;Modular Perl in Red Hat Enterprise Linux¬†8&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer Blog&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2019/05/16/modular-perl-in-red-hat-enterprise-linux-8/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">596027</post-id><dc:creator>Petr Pisar</dc:creator><dc:date>2019-05-16T07:00:52Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/05/16/modular-perl-in-red-hat-enterprise-linux-8/</feedburner:origLink></entry></feed>
