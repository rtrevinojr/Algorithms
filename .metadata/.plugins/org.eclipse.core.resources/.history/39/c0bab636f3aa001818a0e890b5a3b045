package trie;

import java.util.Map;

public class Trie {
	
	
	public TrieNode root;
	
	
	public Trie () {
		
		root = new TrieNode();
	}

	public void insert (String word) {
		
		TrieNode node = root;
		
		for (int i = 0; i < word.length(); i++) {
			
			Character ch = word.charAt(i);
			
			if (node.children.containsKey(ch)) {
				
				node = node.children.get(ch);
			}
			else {
				
				node.children.put(ch, new TrieNode());
				
				node = node.children.get(ch);
			}
		}
		
		node.setValidWord();
	}
	
	public String find (String word) {
		
		TrieNode node = root;
		for (int i = 0; i < word.length(); i++) {
			
		}
	}
	
	public void printDictionary () {
		
	
		printDictionaryHelper (root, "");
		
	}
	
	public void printDictionaryHelper (TrieNode node, String word) {
		
		for (Map.Entry<Character, TrieNode> entry : node.children.entrySet()) {
			
			if (entry.getValue().valid) {
				System.out.println(word + entry.getValue().letter);
				printDictionaryHelper (entry.getValue(), word + entry.getValue().letter);
			}
			else {
				if (entry != null && entry.getValue() != null)
					printDictionaryHelper (entry.getValue(), word + entry.getValue().letter);
			}
		}
	}
	
	
	
	public static void main (String [] args) {
		
		System.out.println("main...");
		
		Trie trie = new Trie();
		
		trie.insert("word");
		
		trie.printDictionary();
		
		
		
	}
	
}
